
Lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002efc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003278  08003278  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003278  08003278  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080032f0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080032f0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008206  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c00  00000000  00000000  0002829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00029ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d9d  00000000  00000000  0002adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008afc  00000000  00000000  00041b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a9a  00000000  00000000  0004a661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb0fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022ac  00000000  00000000  000cb150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ff0 	.word	0x08002ff0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ff0 	.word	0x08002ff0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc0b 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8b5 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f919 	bl	80003a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f8ed 	bl	800034c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t SIZE_ONE_PAGE = 0x400;
 8000172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00
 8000178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800017a:	4613      	mov	r3, r2
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	1a9b      	subs	r3, r3, r2
 8000180:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000184:	623b      	str	r3, [r7, #32]

  	size_t SIZE_uint32 = sizeof(uint32_t); // 32 біта це 4 байти
 8000186:	2304      	movs	r3, #4
 8000188:	61fb      	str	r3, [r7, #28]
  	// в одну сторінку розміром 1Кб можна записати 1024/4=256 змінних розміром 4 байти

  	uint32_t val_000 = 0x01234567;
 800018a:	4b46      	ldr	r3, [pc, #280]	; (80002a4 <main+0x148>)
 800018c:	61bb      	str	r3, [r7, #24]
  	uint32_t val_004 = 0x89ABCDEF;
 800018e:	4b46      	ldr	r3, [pc, #280]	; (80002a8 <main+0x14c>)
 8000190:	617b      	str	r3, [r7, #20]
  	uint32_t val_00C = 0x01020304;
 8000192:	4b46      	ldr	r3, [pc, #280]	; (80002ac <main+0x150>)
 8000194:	613b      	str	r3, [r7, #16]
  	uint32_t val_3FC = 0x0000FFFF; //1024-4=1020 == 0x400-0x004=0x3FC
 8000196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800019a:	60fb      	str	r3, [r7, #12]
  	char word[6]={'s','i','z','e','o','f'};
 800019c:	4a44      	ldr	r2, [pc, #272]	; (80002b0 <main+0x154>)
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001a4:	6018      	str	r0, [r3, #0]
 80001a6:	3304      	adds	r3, #4
 80001a8:	8019      	strh	r1, [r3, #0]

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 64!!!\n\r", sizeof("\n\n\r!!!Erase page 64!!!\n\r"), 100);
 80001aa:	2364      	movs	r3, #100	; 0x64
 80001ac:	2219      	movs	r2, #25
 80001ae:	4941      	ldr	r1, [pc, #260]	; (80002b4 <main+0x158>)
 80001b0:	4841      	ldr	r0, [pc, #260]	; (80002b8 <main+0x15c>)
 80001b2:	f001 fe12 	bl	8001dda <HAL_UART_Transmit>
  	Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 64 сторінки
 80001b6:	6a38      	ldr	r0, [r7, #32]
 80001b8:	f000 f9b4 	bl	8000524 <Flash_Erase_One_Page>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80001bc:	2364      	movs	r3, #100	; 0x64
 80001be:	220f      	movs	r2, #15
 80001c0:	493e      	ldr	r1, [pc, #248]	; (80002bc <main+0x160>)
 80001c2:	483d      	ldr	r0, [pc, #244]	; (80002b8 <main+0x15c>)
 80001c4:	f001 fe09 	bl	8001dda <HAL_UART_Transmit>
  	// запис значень на початку і в кінці 127 сторінки
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32, val_000);
 80001c8:	69b9      	ldr	r1, [r7, #24]
 80001ca:	6a38      	ldr	r0, [r7, #32]
 80001cc:	f000 fa08 	bl	80005e0 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32, val_004);
 80001d0:	6a3a      	ldr	r2, [r7, #32]
 80001d2:	69fb      	ldr	r3, [r7, #28]
 80001d4:	4413      	add	r3, r2
 80001d6:	6979      	ldr	r1, [r7, #20]
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fa01 	bl	80005e0 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32, val_00C);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	4613      	mov	r3, r2
 80001e2:	005b      	lsls	r3, r3, #1
 80001e4:	441a      	add	r2, r3
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	4413      	add	r3, r2
 80001ea:	6939      	ldr	r1, [r7, #16]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f9f7 	bl	80005e0 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32, val_3FC);
 80001f2:	69fa      	ldr	r2, [r7, #28]
 80001f4:	4613      	mov	r3, r2
 80001f6:	021b      	lsls	r3, r3, #8
 80001f8:	1a9a      	subs	r2, r3, r2
 80001fa:	6a3b      	ldr	r3, [r7, #32]
 80001fc:	4413      	add	r3, r2
 80001fe:	68f9      	ldr	r1, [r7, #12]
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f9ed 	bl	80005e0 <Flash_Write_uint32>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 63!!!\n\r", sizeof("\n!!!Erase page 63!!!\n\r"), 100);
 8000206:	2364      	movs	r3, #100	; 0x64
 8000208:	2217      	movs	r2, #23
 800020a:	492d      	ldr	r1, [pc, #180]	; (80002c0 <main+0x164>)
 800020c:	482a      	ldr	r0, [pc, #168]	; (80002b8 <main+0x15c>)
 800020e:	f001 fde4 	bl	8001dda <HAL_UART_Transmit>
  	Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 63 сторінки
 8000212:	6a3a      	ldr	r2, [r7, #32]
 8000214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000216:	1ad3      	subs	r3, r2, r3
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f983 	bl	8000524 <Flash_Erase_One_Page>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 800021e:	2364      	movs	r3, #100	; 0x64
 8000220:	220f      	movs	r2, #15
 8000222:	4926      	ldr	r1, [pc, #152]	; (80002bc <main+0x160>)
 8000224:	4824      	ldr	r0, [pc, #144]	; (80002b8 <main+0x15c>)
 8000226:	f001 fdd8 	bl	8001dda <HAL_UART_Transmit>
  	// запис значень на початку і в кінці 126 сторінки

  	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x004, val_004);
 800022a:	6a3a      	ldr	r2, [r7, #32]
 800022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	3304      	adds	r3, #4
 8000232:	6979      	ldr	r1, [r7, #20]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9d3 	bl	80005e0 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x00C, val_00C);
 800023a:	6a3a      	ldr	r2, [r7, #32]
 800023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	330c      	adds	r3, #12
 8000242:	6939      	ldr	r1, [r7, #16]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f9cb 	bl	80005e0 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x3FC, val_3FC);
 800024a:	6a3a      	ldr	r2, [r7, #32]
 800024c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000254:	68f9      	ldr	r1, [r7, #12]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f9c2 	bl	80005e0 <Flash_Write_uint32>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	220e      	movs	r2, #14
 8000260:	4918      	ldr	r1, [pc, #96]	; (80002c4 <main+0x168>)
 8000262:	4815      	ldr	r0, [pc, #84]	; (80002b8 <main+0x15c>)
 8000264:	f001 fdb9 	bl	8001dda <HAL_UART_Transmit>
/*  	uint32_t a = Flash_Read_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32);
  	uint32_t b = Flash_Read_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32);
  	uint32_t c = Flash_Read_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32);
  	uint32_t d = Flash_Read_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32);*/

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write64!!!\n\r", sizeof("\n!!!Write64!!!\n\r"), 100);
 8000268:	2364      	movs	r3, #100	; 0x64
 800026a:	2211      	movs	r2, #17
 800026c:	4916      	ldr	r1, [pc, #88]	; (80002c8 <main+0x16c>)
 800026e:	4812      	ldr	r0, [pc, #72]	; (80002b8 <main+0x15c>)
 8000270:	f001 fdb3 	bl	8001dda <HAL_UART_Transmit>
  	Flash_Write_uint64(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, 1844674407370955161);
 8000274:	6a3a      	ldr	r2, [r7, #32]
 8000276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000278:	1ad1      	subs	r1, r2, r3
 800027a:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <main+0x170>)
 8000280:	4608      	mov	r0, r1
 8000282:	f000 fa03 	bl	800068c <Flash_Write_uint64>
  	Flash_Write_uint8(0x08007800, word);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <main+0x174>)
 800028c:	f000 f89e 	bl	80003cc <Flash_Write_uint8>
  	Flash_Read_uint8(0x08007800, word);
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <main+0x174>)
 8000296:	f000 f901 	bl	800049c <Flash_Read_uint8>
  	HAL_Delay(10000);
 800029a:	f242 7010 	movw	r0, #10000	; 0x2710
 800029e:	f000 fbcf 	bl	8000a40 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <main+0x146>
 80002a4:	01234567 	.word	0x01234567
 80002a8:	89abcdef 	.word	0x89abcdef
 80002ac:	01020304 	.word	0x01020304
 80002b0:	08003070 	.word	0x08003070
 80002b4:	08003008 	.word	0x08003008
 80002b8:	20000098 	.word	0x20000098
 80002bc:	08003024 	.word	0x08003024
 80002c0:	08003034 	.word	0x08003034
 80002c4:	0800304c 	.word	0x0800304c
 80002c8:	0800305c 	.word	0x0800305c
 80002cc:	19999999 	.word	0x19999999
 80002d0:	08007800 	.word	0x08007800

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fa2e 	bl	8002744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000302:	2300      	movs	r3, #0
 8000304:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0318 	add.w	r3, r7, #24
 800030a:	4618      	mov	r0, r3
 800030c:	f001 f8fe 	bl	800150c <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000316:	f000 fa11 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031e:	2300      	movs	r3, #0
 8000320:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fb6a 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033e:	f000 f9fd 	bl	800073c <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3740      	adds	r7, #64	; 0x40
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <MX_USART1_UART_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800035c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000384:	f001 fcdc 	bl	8001d40 <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f9d5 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000098 	.word	0x20000098
 800039c:	40013800 	.word	0x40013800

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_GPIO_Init+0x28>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <MX_GPIO_Init+0x28>)
 80003ac:	f043 0304 	orr.w	r3, r3, #4
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_GPIO_Init+0x28>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0304 	and.w	r3, r3, #4
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <Flash_Write_uint8>:

/* USER CODE BEGIN 4 */
/////////////Функції запису та читання для 1 байтних масивів/////////////
void Flash_Write_uint8(uint32_t MYADDR, char val[])
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b096      	sub	sp, #88	; 0x58
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
	char str[64] = { 0, };
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	223c      	movs	r2, #60	; 0x3c
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 f9ae 	bl	8002744 <memset>
	for(int i = 0; i <= strlen(val); i++)
 80003e8:	2300      	movs	r3, #0
 80003ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80003ec:	e02f      	b.n	800044e <Flash_Write_uint8+0x82>
	{
		HAL_FLASH_Unlock();
 80003ee:	f000 fd79 	bl	8000ee4 <HAL_FLASH_Unlock>

		if (HAL_FLASH_Program(0x0U, MYADDR, val[i]) != HAL_OK)
 80003f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	4413      	add	r3, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	f04f 0300 	mov.w	r3, #0
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fcfe 	bl	8000e04 <HAL_FLASH_Program>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d017      	beq.n	800043e <Flash_Write_uint8+0x72>
		{
			uint32_t er = HAL_FLASH_GetError();
 800040e:	f000 fd9f 	bl	8000f50 <HAL_FLASH_GetError>
 8000412:	64b8      	str	r0, [r7, #72]	; 0x48
			snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 8000414:	f107 0008 	add.w	r0, r7, #8
 8000418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800041a:	4a1d      	ldr	r2, [pc, #116]	; (8000490 <Flash_Write_uint8+0xc4>)
 800041c:	2140      	movs	r1, #64	; 0x40
 800041e:	f002 f999 	bl	8002754 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff fe90 	bl	800014c <strlen>
 800042c:	4603      	mov	r3, r0
 800042e:	b29a      	uxth	r2, r3
 8000430:	f107 0108 	add.w	r1, r7, #8
 8000434:	2364      	movs	r3, #100	; 0x64
 8000436:	4817      	ldr	r0, [pc, #92]	; (8000494 <Flash_Write_uint8+0xc8>)
 8000438:	f001 fccf 	bl	8001dda <HAL_UART_Transmit>
			while (1)
 800043c:	e7fe      	b.n	800043c <Flash_Write_uint8+0x70>
			{
			}
		}
		MYADDR+=0x001;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]

		HAL_FLASH_Lock();
 8000444:	f000 fd74 	bl	8000f30 <HAL_FLASH_Lock>
	for(int i = 0; i <= strlen(val); i++)
 8000448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800044a:	3301      	adds	r3, #1
 800044c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800044e:	6838      	ldr	r0, [r7, #0]
 8000450:	f7ff fe7c 	bl	800014c <strlen>
 8000454:	4602      	mov	r2, r0
 8000456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000458:	429a      	cmp	r2, r3
 800045a:	d2c8      	bcs.n	80003ee <Flash_Write_uint8+0x22>
	}
	snprintf(str, 64, "Write phrase bits %s to address 0x%08lX OK\n\r", val, MYADDR);
 800045c:	f107 0008 	add.w	r0, r7, #8
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <Flash_Write_uint8+0xcc>)
 8000468:	2140      	movs	r1, #64	; 0x40
 800046a:	f002 f973 	bl	8002754 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff fe6a 	bl	800014c <strlen>
 8000478:	4603      	mov	r3, r0
 800047a:	b29a      	uxth	r2, r3
 800047c:	f107 0108 	add.w	r1, r7, #8
 8000480:	2364      	movs	r3, #100	; 0x64
 8000482:	4804      	ldr	r0, [pc, #16]	; (8000494 <Flash_Write_uint8+0xc8>)
 8000484:	f001 fca9 	bl	8001dda <HAL_UART_Transmit>
}
 8000488:	bf00      	nop
 800048a:	3750      	adds	r7, #80	; 0x50
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	08003078 	.word	0x08003078
 8000494:	20000098 	.word	0x20000098
 8000498:	08003094 	.word	0x08003094

0800049c <Flash_Read_uint8>:

void Flash_Read_uint8(uint32_t MYADDR, char val[])
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b094      	sub	sp, #80	; 0x50
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
	char str[64] = { 0, };
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	223c      	movs	r2, #60	; 0x3c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 f946 	bl	8002744 <memset>

	for(int i = 0; i <= strlen(val); i++){
 80004b8:	2300      	movs	r3, #0
 80004ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004bc:	e010      	b.n	80004e0 <Flash_Read_uint8+0x44>
	uint8_t dig8 = *(uint8_t*) MYADDR;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	str[i] = dig8;
 80004c6:	f107 0208 	add.w	r2, r7, #8
 80004ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004cc:	4413      	add	r3, r2
 80004ce:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80004d2:	701a      	strb	r2, [r3, #0]
	MYADDR+=0x001;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3301      	adds	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= strlen(val); i++){
 80004da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004dc:	3301      	adds	r3, #1
 80004de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004e0:	6838      	ldr	r0, [r7, #0]
 80004e2:	f7ff fe33 	bl	800014c <strlen>
 80004e6:	4602      	mov	r2, r0
 80004e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d2e7      	bcs.n	80004be <Flash_Read_uint8+0x22>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read phrase!!!\n\r", sizeof("\n!!!Read phrase!!!\n\r"), 100);
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	2215      	movs	r2, #21
 80004f2:	490a      	ldr	r1, [pc, #40]	; (800051c <Flash_Read_uint8+0x80>)
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <Flash_Read_uint8+0x84>)
 80004f6:	f001 fc70 	bl	8001dda <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe24 	bl	800014c <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	b29a      	uxth	r2, r3
 8000508:	f107 0108 	add.w	r1, r7, #8
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <Flash_Read_uint8+0x84>)
 8000510:	f001 fc63 	bl	8001dda <HAL_UART_Transmit>
}
 8000514:	bf00      	nop
 8000516:	3750      	adds	r7, #80	; 0x50
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	080030c4 	.word	0x080030c4
 8000520:	20000098 	.word	0x20000098

08000524 <Flash_Erase_One_Page>:
}

/////////////Функції запису читання та стирання сторінки для 32 біт/////////////

void Flash_Erase_One_Page(uint32_t MYADDR)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b09a      	sub	sp, #104	; 0x68
 8000528:	af02      	add	r7, sp, #8
 800052a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800052c:	2300      	movs	r3, #0
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
	EraseInitStruct.PageAddress = MYADDR;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	657b      	str	r3, [r7, #84]	; 0x54
	EraseInitStruct.NbPages = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	65bb      	str	r3, [r7, #88]	; 0x58

	uint32_t page_error = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48

	char str[64] = { 0, };
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	223c      	movs	r2, #60	; 0x3c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f002 f8fb 	bl	8002744 <memset>

	HAL_FLASH_Unlock();
 800054e:	f000 fcc9 	bl	8000ee4 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000552:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fdb3 	bl	80010c8 <HAL_FLASHEx_Erase>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d017      	beq.n	8000598 <Flash_Erase_One_Page+0x74>
	{
		uint32_t er = HAL_FLASH_GetError();
 8000568:	f000 fcf2 	bl	8000f50 <HAL_FLASH_GetError>
 800056c:	65f8      	str	r0, [r7, #92]	; 0x5c
		snprintf(str, 64, "Error Flash_Erase(): %lu\n\r", er);
 800056e:	f107 0008 	add.w	r0, r7, #8
 8000572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000574:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <Flash_Erase_One_Page+0xb0>)
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	f002 f8ec 	bl	8002754 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fde3 	bl	800014c <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f107 0108 	add.w	r1, r7, #8
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <Flash_Erase_One_Page+0xb4>)
 8000592:	f001 fc22 	bl	8001dda <HAL_UART_Transmit>
		while (1)
 8000596:	e7fe      	b.n	8000596 <Flash_Erase_One_Page+0x72>
		{
		}
	}

	snprintf(str, 64, "Erase Flash from address 0x%08lX to address 0x%08lX OK\n\r", MYADDR, MYADDR+0x400-1);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800059e:	f107 0008 	add.w	r0, r7, #8
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <Flash_Erase_One_Page+0xb8>)
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	f002 f8d3 	bl	8002754 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fdca 	bl	800014c <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f107 0108 	add.w	r1, r7, #8
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <Flash_Erase_One_Page+0xb4>)
 80005c4:	f001 fc09 	bl	8001dda <HAL_UART_Transmit>

	HAL_FLASH_Lock();
 80005c8:	f000 fcb2 	bl	8000f30 <HAL_FLASH_Lock>
}
 80005cc:	bf00      	nop
 80005ce:	3760      	adds	r7, #96	; 0x60
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08003110 	.word	0x08003110
 80005d8:	20000098 	.word	0x20000098
 80005dc:	0800312c 	.word	0x0800312c

080005e0 <Flash_Write_uint32>:

void Flash_Write_uint32(uint32_t MYADDR, uint32_t val)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	char str[64] = { 0, };
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	223c      	movs	r2, #60	; 0x3c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f8a4 	bl	8002744 <memset>

	HAL_FLASH_Unlock();
 80005fc:	f000 fc72 	bl	8000ee4 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MYADDR, val) != HAL_OK)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fbfa 	bl	8000e04 <HAL_FLASH_Program>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d017      	beq.n	8000646 <Flash_Write_uint32+0x66>
	{
		uint32_t er = HAL_FLASH_GetError();
 8000616:	f000 fc9b 	bl	8000f50 <HAL_FLASH_GetError>
 800061a:	64f8      	str	r0, [r7, #76]	; 0x4c
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 800061c:	f107 000c 	add.w	r0, r7, #12
 8000620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <Flash_Write_uint32+0xa0>)
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	f002 f895 	bl	8002754 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fd8c 	bl	800014c <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	f107 010c 	add.w	r1, r7, #12
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <Flash_Write_uint32+0xa4>)
 8000640:	f001 fbcb 	bl	8001dda <HAL_UART_Transmit>
		while (1)
 8000644:	e7fe      	b.n	8000644 <Flash_Write_uint32+0x64>
		{
		}
	}

	snprintf(str, 64, "Write 32 bits (Hex: 0x%08lX) to address 0x%08lX OK\n\r", val, MYADDR);
 8000646:	f107 000c 	add.w	r0, r7, #12
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <Flash_Write_uint32+0xa8>)
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	f002 f87e 	bl	8002754 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fd75 	bl	800014c <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <Flash_Write_uint32+0xa4>)
 800066e:	f001 fbb4 	bl	8001dda <HAL_UART_Transmit>

	HAL_FLASH_Lock();
 8000672:	f000 fc5d 	bl	8000f30 <HAL_FLASH_Lock>
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	08003078 	.word	0x08003078
 8000684:	20000098 	.word	0x20000098
 8000688:	08003168 	.word	0x08003168

0800068c <Flash_Write_uint64>:
}

	/////////////Функції запису для 64біт/////////////

void Flash_Write_uint64(uint32_t MYADDR, uint64_t val)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	; 0x68
 8000690:	af04      	add	r7, sp, #16
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	e9c7 2300 	strd	r2, r3, [r7]
	char str[64] = { 0, };
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	223c      	movs	r2, #60	; 0x3c
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f84d 	bl	8002744 <memset>

	HAL_FLASH_Unlock();
 80006aa:	f000 fc1b 	bl	8000ee4 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MYADDR, val) != HAL_OK)
 80006ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006b2:	68f9      	ldr	r1, [r7, #12]
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 fba5 	bl	8000e04 <HAL_FLASH_Program>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d017      	beq.n	80006f0 <Flash_Write_uint64+0x64>
	{
		uint32_t er = HAL_FLASH_GetError();
 80006c0:	f000 fc46 	bl	8000f50 <HAL_FLASH_GetError>
 80006c4:	6578      	str	r0, [r7, #84]	; 0x54
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 80006c6:	f107 0014 	add.w	r0, r7, #20
 80006ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006cc:	4a18      	ldr	r2, [pc, #96]	; (8000730 <Flash_Write_uint64+0xa4>)
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	f002 f840 	bl	8002754 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd37 	bl	800014c <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f107 0114 	add.w	r1, r7, #20
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <Flash_Write_uint64+0xa8>)
 80006ea:	f001 fb76 	bl	8001dda <HAL_UART_Transmit>
		while (1)
 80006ee:	e7fe      	b.n	80006ee <Flash_Write_uint64+0x62>
		{
		}
	}

	snprintf(str, 64, "Write 64 bits (Hex: 0x%08llX) to address 0x%08lX OK\n\r", val, MYADDR);
 80006f0:	f107 0014 	add.w	r0, r7, #20
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006fc:	e9cd 2300 	strd	r2, r3, [sp]
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <Flash_Write_uint64+0xac>)
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	f002 f826 	bl	8002754 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd1d 	bl	800014c <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	f107 0114 	add.w	r1, r7, #20
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <Flash_Write_uint64+0xa8>)
 800071e:	f001 fb5c 	bl	8001dda <HAL_UART_Transmit>

	HAL_FLASH_Lock();
 8000722:	f000 fc05 	bl	8000f30 <HAL_FLASH_Lock>
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08003078 	.word	0x08003078
 8000734:	20000098 	.word	0x20000098
 8000738:	080031e4 	.word	0x080031e4

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a20      	ldr	r2, [pc, #128]	; (8000848 <HAL_UART_MspInit+0x9c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d139      	bne.n	8000840 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a18      	ldr	r2, [pc, #96]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <HAL_UART_MspInit+0xa4>)
 8000812:	f000 fd01 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <HAL_UART_MspInit+0xa4>)
 800082c:	f000 fcf4 	bl	8001218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2025      	movs	r0, #37	; 0x25
 8000836:	f000 f9fe 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800083a:	2025      	movs	r0, #37	; 0x25
 800083c:	f000 fa17 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f8b5 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <USART1_IRQHandler+0x10>)
 80008aa:	f001 fb29 	bl	8001f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000098 	.word	0x20000098

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f001 ff02 	bl	80026f0 <__errno>
 80008ec:	4603      	mov	r3, r0
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <_sbrk+0x64>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20002800 	.word	0x20002800
 8000918:	00000400 	.word	0x00000400
 800091c:	2000008c 	.word	0x2000008c
 8000920:	20000110 	.word	0x20000110

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000956:	f7ff ffe5 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 fecf 	bl	80026fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fbfd 	bl	800015c <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800096c:	08003280 	.word	0x08003280
  ldr r2, =_sbss
 8000970:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000974:	20000110 	.word	0x20000110

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f947 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fed6 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f95f 	bl	8000c8a <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f927 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000dc 	.word	0x200000dc

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200000dc 	.word	0x200000dc

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4906      	ldr	r1, [pc, #24]	; (8000b20 <__NVIC_EnableIRQ+0x34>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff90 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff2d 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff42 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff35 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa2 	bl	8000bdc <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d008      	beq.n	8000cca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e020      	b.n	8000d0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020e 	bic.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d005      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2204      	movs	r2, #4
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e051      	b.n	8000dde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 020e 	bic.w	r2, r2, #14
 8000d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0201 	bic.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_DMA_Abort_IT+0xd0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d029      	beq.n	8000db8 <HAL_DMA_Abort_IT+0xa0>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a20      	ldr	r2, [pc, #128]	; (8000dec <HAL_DMA_Abort_IT+0xd4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d022      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x9c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <HAL_DMA_Abort_IT+0xd8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d01a      	beq.n	8000dae <HAL_DMA_Abort_IT+0x96>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_DMA_Abort_IT+0xdc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d012      	beq.n	8000da8 <HAL_DMA_Abort_IT+0x90>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <HAL_DMA_Abort_IT+0xe0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00a      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x8a>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <HAL_DMA_Abort_IT+0xe4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d102      	bne.n	8000d9c <HAL_DMA_Abort_IT+0x84>
 8000d96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d9a:	e00e      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000da0:	e00b      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da6:	e008      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	e005      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db2:	e002      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000db4:	2310      	movs	r3, #16
 8000db6:	e000      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <HAL_DMA_Abort_IT+0xe8>)
 8000dbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	4798      	blx	r3
    } 
  }
  return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020008 	.word	0x40020008
 8000dec:	4002001c 	.word	0x4002001c
 8000df0:	40020030 	.word	0x40020030
 8000df4:	40020044 	.word	0x40020044
 8000df8:	40020058 	.word	0x40020058
 8000dfc:	4002006c 	.word	0x4002006c
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_FLASH_Program+0xd8>)
 8000e20:	7e1b      	ldrb	r3, [r3, #24]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <HAL_FLASH_Program+0x26>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e054      	b.n	8000ed4 <HAL_FLASH_Program+0xd0>
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <HAL_FLASH_Program+0xd8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e34:	f000 f8b2 	bl	8000f9c <FLASH_WaitForLastOperation>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d144      	bne.n	8000ecc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	757b      	strb	r3, [r7, #21]
 8000e4c:	e007      	b.n	8000e5e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d102      	bne.n	8000e5a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e54:	2302      	movs	r3, #2
 8000e56:	757b      	strb	r3, [r7, #21]
 8000e58:	e001      	b.n	8000e5e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	75bb      	strb	r3, [r7, #22]
 8000e62:	e02d      	b.n	8000ec0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e64:	7dbb      	ldrb	r3, [r7, #22]
 8000e66:	005a      	lsls	r2, r3, #1
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	eb02 0c03 	add.w	ip, r2, r3
 8000e6e:	7dbb      	ldrb	r3, [r7, #22]
 8000e70:	0119      	lsls	r1, r3, #4
 8000e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e76:	f1c1 0620 	rsb	r6, r1, #32
 8000e7a:	f1a1 0020 	sub.w	r0, r1, #32
 8000e7e:	fa22 f401 	lsr.w	r4, r2, r1
 8000e82:	fa03 f606 	lsl.w	r6, r3, r6
 8000e86:	4334      	orrs	r4, r6
 8000e88:	fa23 f000 	lsr.w	r0, r3, r0
 8000e8c:	4304      	orrs	r4, r0
 8000e8e:	fa23 f501 	lsr.w	r5, r3, r1
 8000e92:	b2a3      	uxth	r3, r4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4660      	mov	r0, ip
 8000e98:	f000 f864 	bl	8000f64 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea0:	f000 f87c 	bl	8000f9c <FLASH_WaitForLastOperation>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_FLASH_Program+0xdc>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_FLASH_Program+0xdc>)
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d107      	bne.n	8000eca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000eba:	7dbb      	ldrb	r3, [r7, #22]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	75bb      	strb	r3, [r7, #22]
 8000ec0:	7dba      	ldrb	r2, [r7, #22]
 8000ec2:	7d7b      	ldrb	r3, [r7, #21]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3cd      	bcc.n	8000e64 <HAL_FLASH_Program+0x60>
 8000ec8:	e000      	b.n	8000ecc <HAL_FLASH_Program+0xc8>
      {
        break;
 8000eca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_FLASH_Program+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	761a      	strb	r2, [r3, #24]

  return status;
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000edc:	200000e0 	.word	0x200000e0
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_FLASH_Unlock+0x40>)
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00d      	beq.n	8000f16 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_FLASH_Unlock+0x40>)
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_FLASH_Unlock+0x44>)
 8000efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_FLASH_Unlock+0x40>)
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_FLASH_Unlock+0x48>)
 8000f04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_FLASH_Unlock+0x40>)
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40022000 	.word	0x40022000
 8000f28:	45670123 	.word	0x45670123
 8000f2c:	cdef89ab 	.word	0xcdef89ab

08000f30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_FLASH_Lock+0x1c>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_FLASH_Lock+0x1c>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_FLASH_GetError+0x10>)
 8000f56:	69db      	ldr	r3, [r3, #28]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	200000e0 	.word	0x200000e0

08000f64 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <FLASH_Program_HalfWord+0x30>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <FLASH_Program_HalfWord+0x34>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <FLASH_Program_HalfWord+0x34>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	887a      	ldrh	r2, [r7, #2]
 8000f86:	801a      	strh	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200000e0 	.word	0x200000e0
 8000f98:	40022000 	.word	0x40022000

08000f9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff fd42 	bl	8000a2c <HAL_GetTick>
 8000fa8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000faa:	e010      	b.n	8000fce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb2:	d00c      	beq.n	8000fce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <FLASH_WaitForLastOperation+0x2e>
 8000fba:	f7ff fd37 	bl	8000a2c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d201      	bcs.n	8000fce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e025      	b.n	800101a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <FLASH_WaitForLastOperation+0x88>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1e8      	bne.n	8000fac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <FLASH_WaitForLastOperation+0x88>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <FLASH_WaitForLastOperation+0x88>)
 8000fe8:	2220      	movs	r2, #32
 8000fea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <FLASH_WaitForLastOperation+0x88>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10b      	bne.n	8001010 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <FLASH_WaitForLastOperation+0x88>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <FLASH_WaitForLastOperation+0x88>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001010:	f000 f80a 	bl	8001028 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <FLASH_SetErrorCode+0x9c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <FLASH_SetErrorCode+0x9c>)
 8001048:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b00      	cmp	r3, #0
 800105c:	d009      	beq.n	8001072 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <FLASH_SetErrorCode+0x9c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <FLASH_SetErrorCode+0x9c>)
 8001068:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <FLASH_SetErrorCode+0x9c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <FLASH_SetErrorCode+0x9c>)
 8001088:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f240 1201 	movw	r2, #257	; 0x101
 800109c:	4293      	cmp	r3, r2
 800109e:	d106      	bne.n	80010ae <FLASH_SetErrorCode+0x86>
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	61d3      	str	r3, [r2, #28]
}  
 80010ac:	e002      	b.n	80010b4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <FLASH_SetErrorCode+0x98>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60d3      	str	r3, [r2, #12]
}  
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000
 80010c4:	200000e0 	.word	0x200000e0

080010c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_FLASHEx_Erase+0xd0>)
 80010dc:	7e1b      	ldrb	r3, [r3, #24]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_FLASHEx_Erase+0x1e>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e053      	b.n	800118e <HAL_FLASHEx_Erase+0xc6>
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_FLASHEx_Erase+0xd0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d116      	bne.n	8001122 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f8:	f7ff ff50 	bl	8000f9c <FLASH_WaitForLastOperation>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d141      	bne.n	8001186 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 f84c 	bl	80011a0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800110c:	f7ff ff46 	bl	8000f9c <FLASH_WaitForLastOperation>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_FLASHEx_Erase+0xd4>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_FLASHEx_Erase+0xd4>)
 800111a:	f023 0304 	bic.w	r3, r3, #4
 800111e:	6113      	str	r3, [r2, #16]
 8001120:	e031      	b.n	8001186 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001122:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001126:	f7ff ff39 	bl	8000f9c <FLASH_WaitForLastOperation>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d12a      	bne.n	8001186 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	e019      	b.n	8001174 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f000 f849 	bl	80011d8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001146:	f24c 3050 	movw	r0, #50000	; 0xc350
 800114a:	f7ff ff27 	bl	8000f9c <FLASH_WaitForLastOperation>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_FLASHEx_Erase+0xd4>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_FLASHEx_Erase+0xd4>)
 8001158:	f023 0302 	bic.w	r3, r3, #2
 800115c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	601a      	str	r2, [r3, #0]
            break;
 800116a:	e00c      	b.n	8001186 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001172:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	029a      	lsls	r2, r3, #10
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3dc      	bcc.n	8001140 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_FLASHEx_Erase+0xd0>)
 8001188:	2200      	movs	r2, #0
 800118a:	761a      	strb	r2, [r3, #24]

  return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000e0 	.word	0x200000e0
 800119c:	40022000 	.word	0x40022000

080011a0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <FLASH_MassErase+0x30>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <FLASH_MassErase+0x34>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <FLASH_MassErase+0x34>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <FLASH_MassErase+0x34>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <FLASH_MassErase+0x34>)
 80011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200000e0 	.word	0x200000e0
 80011d4:	40022000 	.word	0x40022000

080011d8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <FLASH_PageErase+0x38>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <FLASH_PageErase+0x3c>)
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <FLASH_PageErase+0x3c>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <FLASH_PageErase+0x3c>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <FLASH_PageErase+0x3c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <FLASH_PageErase+0x3c>)
 80011fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001202:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200000e0 	.word	0x200000e0
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e148      	b.n	80014be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8137 	bne.w	80014b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4aa3      	ldr	r2, [pc, #652]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4aa1      	ldr	r2, [pc, #644]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4aa1      	ldr	r2, [pc, #644]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a9f      	ldr	r2, [pc, #636]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a9f      	ldr	r2, [pc, #636]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a9d      	ldr	r2, [pc, #628]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a9d      	ldr	r2, [pc, #628]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a9b      	ldr	r2, [pc, #620]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a9b      	ldr	r2, [pc, #620]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a99      	ldr	r2, [pc, #612]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a82      	ldr	r2, [pc, #520]	; (80014f0 <HAL_GPIO_Init+0x2d8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8090 	beq.w	80014b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2e4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1dc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a47      	ldr	r2, [pc, #284]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1d8>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f8:	2300      	movs	r3, #0
 80013fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140a:	493b      	ldr	r1, [pc, #236]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4933      	ldr	r1, [pc, #204]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800143c:	4013      	ands	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	492d      	ldr	r1, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4929      	ldr	r1, [pc, #164]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001464:	4013      	ands	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	4923      	ldr	r1, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	491f      	ldr	r1, [pc, #124]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800148c:	4013      	ands	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	4919      	ldr	r1, [pc, #100]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4915      	ldr	r1, [pc, #84]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3301      	adds	r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f aeaf 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	372c      	adds	r7, #44	; 0x2c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	10320000 	.word	0x10320000
 80014e0:	10310000 	.word	0x10310000
 80014e4:	10220000 	.word	0x10220000
 80014e8:	10210000 	.word	0x10210000
 80014ec:	10120000 	.word	0x10120000
 80014f0:	10110000 	.word	0x10110000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40011000 	.word	0x40011000
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e26c      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8087 	beq.w	800163a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152c:	4b92      	ldr	r3, [pc, #584]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b04      	cmp	r3, #4
 8001536:	d00c      	beq.n	8001552 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001538:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d112      	bne.n	800156a <HAL_RCC_OscConfig+0x5e>
 8001544:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4b89      	ldr	r3, [pc, #548]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06c      	beq.n	8001638 <HAL_RCC_OscConfig+0x12c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d168      	bne.n	8001638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e246      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x76>
 8001574:	4b80      	ldr	r3, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a7f      	ldr	r2, [pc, #508]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e02e      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x98>
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b78      	ldr	r3, [pc, #480]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a77      	ldr	r2, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0xbc>
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a71      	ldr	r2, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6e      	ldr	r2, [pc, #440]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a67      	ldr	r2, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa20 	bl	8000a2c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fa1c 	bl	8000a2c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1fa      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xe4>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa0c 	bl	8000a2c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fa08 	bl	8000a2c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1e6      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x10c>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d063      	beq.n	800170e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x18c>
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x176>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1ba      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4939      	ldr	r1, [pc, #228]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e03a      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff f9c1 	bl	8000a2c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff f9bd 	bl	8000a2c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e19b      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4927      	ldr	r1, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9a0 	bl	8000a2c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff f99c 	bl	8000a2c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e17a      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d03a      	beq.n	8001790 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d019      	beq.n	8001756 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_RCC_OscConfig+0x274>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff f980 	bl	8000a2c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f97c 	bl	8000a2c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e15a      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 fad8 	bl	8001d04 <RCC_Delay>
 8001754:	e01c      	b.n	8001790 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RCC_OscConfig+0x274>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff f966 	bl	8000a2c <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001762:	e00f      	b.n	8001784 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff f962 	bl	8000a2c <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d908      	bls.n	8001784 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e140      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	42420000 	.word	0x42420000
 8001780:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b9e      	ldr	r3, [pc, #632]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e9      	bne.n	8001764 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a6 	beq.w	80018ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b97      	ldr	r3, [pc, #604]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10d      	bne.n	80017ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b94      	ldr	r3, [pc, #592]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a93      	ldr	r2, [pc, #588]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b91      	ldr	r3, [pc, #580]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a8a      	ldr	r2, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff f923 	bl	8000a2c <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff f91f 	bl	8000a2c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0fd      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x4f8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x312>
 8001810:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e02d      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x334>
 8001826:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a75      	ldr	r2, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a72      	ldr	r2, [pc, #456]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	e01c      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_OscConfig+0x356>
 8001848:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a6c      	ldr	r2, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff f8d3 	bl	8000a2c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f8cf 	bl	8000a2c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0ab      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	4b57      	ldr	r3, [pc, #348]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ee      	beq.n	800188a <HAL_RCC_OscConfig+0x37e>
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f8bd 	bl	8000a2c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f8b9 	bl	8000a2c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e095      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ee      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8081 	beq.w	80019f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d061      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d146      	bne.n	8001996 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x4fc>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff f88d 	bl	8000a2c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f889 	bl	8000a2c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e067      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	492d      	ldr	r1, [pc, #180]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a19      	ldr	r1, [r3, #32]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	430b      	orrs	r3, r1
 8001962:	4927      	ldr	r1, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_OscConfig+0x4fc>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff f85d 	bl	8000a2c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f859 	bl	8000a2c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e037      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x46a>
 8001994:	e02f      	b.n	80019f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_RCC_OscConfig+0x4fc>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f846 	bl	8000a2c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f842 	bl	8000a2c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e020      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x498>
 80019c2:	e018      	b.n	80019f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e013      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060

08001a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0d0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4965      	ldr	r1, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d040      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e073      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7fe ff96 	bl	8000a2c <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7fe ff92 	bl	8000a2c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e053      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d210      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fef4 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	0800322c 	.word	0x0800322c
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b490      	push	{r4, r7}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be8:	1d3c      	adds	r4, r7, #4
 8001bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bf0:	f240 2301 	movw	r3, #513	; 0x201
 8001bf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x46>
 8001c1e:	e02d      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c22:	623b      	str	r3, [r7, #32]
      break;
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c32:	4413      	add	r3, r2
 8001c34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0c5b      	lsrs	r3, r3, #17
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c52:	4413      	add	r3, r2
 8001c54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	623b      	str	r3, [r7, #32]
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7e:	623b      	str	r3, [r7, #32]
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	6a3b      	ldr	r3, [r7, #32]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc90      	pop	{r4, r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	0800321c 	.word	0x0800321c
 8001c94:	40021000 	.word	0x40021000
 8001c98:	007a1200 	.word	0x007a1200
 8001c9c:	003d0900 	.word	0x003d0900

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff2 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	0800323c 	.word	0x0800323c

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0adb      	lsrs	r3, r3, #11
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	0800323c 	.word	0x0800323c

08001d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <RCC_Delay+0x34>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <RCC_Delay+0x38>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d20:	bf00      	nop
  }
  while (Delay --);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f9      	bne.n	8001d20 <RCC_Delay+0x1c>
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	10624dd3 	.word	0x10624dd3

08001d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e03f      	b.n	8001dd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fd20 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fc25 	bl	80025d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b08a      	sub	sp, #40	; 0x28
 8001dde:	af02      	add	r7, sp, #8
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d17c      	bne.n	8001ef4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_UART_Transmit+0x2c>
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e075      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Transmit+0x3e>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e06e      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2221      	movs	r2, #33	; 0x21
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fdfd 	bl	8000a2c <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e48:	d108      	bne.n	8001e5c <HAL_UART_Transmit+0x82>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e003      	b.n	8001e64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e6c:	e02a      	b.n	8001ec4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fa11 	bl	80022a0 <UART_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e036      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e007      	b.n	8001eb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1cf      	bne.n	8001e6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2140      	movs	r1, #64	; 0x40
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9e1 	bl	80022a0 <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_UART_IRQHandler+0x52>
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa99 	bl	8002482 <UART_Receive_IT>
      return;
 8001f50:	e17b      	b.n	800224a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80b1 	beq.w	80020bc <HAL_UART_IRQHandler+0x1bc>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_UART_IRQHandler+0x70>
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80a6 	beq.w	80020bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_UART_IRQHandler+0x90>
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_UART_IRQHandler+0xb0>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_UART_IRQHandler+0xd0>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00f      	beq.n	8001ffa <HAL_UART_IRQHandler+0xfa>
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <HAL_UART_IRQHandler+0xee>
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0208 	orr.w	r2, r3, #8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 811e 	beq.w	8002240 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_UART_IRQHandler+0x11e>
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fa32 	bl	8002482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <HAL_UART_IRQHandler+0x146>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d031      	beq.n	80020aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f974 	bl	8002334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d023      	beq.n	80020a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002068:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	2b00      	cmp	r3, #0
 8002070:	d013      	beq.n	800209a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	4a76      	ldr	r2, [pc, #472]	; (8002250 <HAL_UART_IRQHandler+0x350>)
 8002078:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fe4a 	bl	8000d18 <HAL_DMA_Abort_IT>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002094:	4610      	mov	r0, r2
 8002096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	e00e      	b.n	80020b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8ec 	bl	8002278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	e00a      	b.n	80020b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8e8 	bl	8002278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a8:	e006      	b.n	80020b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8e4 	bl	8002278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020b6:	e0c3      	b.n	8002240 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b8:	bf00      	nop
    return;
 80020ba:	e0c1      	b.n	8002240 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	f040 80a1 	bne.w	8002208 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 809b 	beq.w	8002208 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8095 	beq.w	8002208 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d04e      	beq.n	80021a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800210c:	8a3b      	ldrh	r3, [r7, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8098 	beq.w	8002244 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002118:	8a3a      	ldrh	r2, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	f080 8092 	bcs.w	8002244 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8a3a      	ldrh	r2, [r7, #16]
 8002124:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b20      	cmp	r3, #32
 800212e:	d02b      	beq.n	8002188 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800213e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0210 	bic.w	r2, r2, #16
 800217c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fd8d 	bl	8000ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002190:	b29b      	uxth	r3, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	b29b      	uxth	r3, r3
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f876 	bl	800228a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800219e:	e051      	b.n	8002244 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d047      	beq.n	8002248 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80021b8:	8a7b      	ldrh	r3, [r7, #18]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d044      	beq.n	8002248 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0210 	bic.w	r2, r2, #16
 80021fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021fc:	8a7b      	ldrh	r3, [r7, #18]
 80021fe:	4619      	mov	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f842 	bl	800228a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002206:	e01f      	b.n	8002248 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_UART_IRQHandler+0x324>
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8c9 	bl	80023b4 <UART_Transmit_IT>
    return;
 8002222:	e012      	b.n	800224a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <HAL_UART_IRQHandler+0x34a>
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f90a 	bl	8002452 <UART_EndTransmit_IT>
    return;
 800223e:	e004      	b.n	800224a <HAL_UART_IRQHandler+0x34a>
    return;
 8002240:	bf00      	nop
 8002242:	e002      	b.n	800224a <HAL_UART_IRQHandler+0x34a>
      return;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <HAL_UART_IRQHandler+0x34a>
      return;
 8002248:	bf00      	nop
  }
}
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800238d 	.word	0x0800238d

08002254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b0:	e02c      	b.n	800230c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d028      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022c0:	f7fe fbb4 	bl	8000a2c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d21d      	bcs.n	800230c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e00f      	b.n	800232c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	429a      	cmp	r2, r3
 8002328:	d0c3      	beq.n	80022b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800234a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0210 	bic.w	r2, r2, #16
 8002372:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff ff66 	bl	8002278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b21      	cmp	r3, #33	; 0x21
 80023c6:	d13e      	bne.n	8002446 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d0:	d114      	bne.n	80023fc <UART_Transmit_IT+0x48>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d110      	bne.n	80023fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	621a      	str	r2, [r3, #32]
 80023fa:	e008      	b.n	800240e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	1c59      	adds	r1, r3, #1
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6211      	str	r1, [r2, #32]
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29b      	uxth	r3, r3
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4619      	mov	r1, r3
 800241c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002430:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff feee 	bl	8002254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b22      	cmp	r3, #34	; 0x22
 8002494:	f040 8099 	bne.w	80025ca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d117      	bne.n	80024d2 <UART_Receive_IT+0x50>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d113      	bne.n	80024d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	1c9a      	adds	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
 80024d0:	e026      	b.n	8002520 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d007      	beq.n	80024f6 <UART_Receive_IT+0x74>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <UART_Receive_IT+0x82>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e008      	b.n	8002516 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002510:	b2da      	uxtb	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29b      	uxth	r3, r3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4619      	mov	r1, r3
 800252e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002530:	2b00      	cmp	r3, #0
 8002532:	d148      	bne.n	80025c6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0220 	bic.w	r2, r2, #32
 8002542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	2b01      	cmp	r3, #1
 8002572:	d123      	bne.n	80025bc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0210 	bic.w	r2, r2, #16
 8002588:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b10      	cmp	r3, #16
 8002596:	d10a      	bne.n	80025ae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fe68 	bl	800228a <HAL_UARTEx_RxEventCallback>
 80025ba:	e002      	b.n	80025c2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fe52 	bl	8002266 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e002      	b.n	80025cc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800260e:	f023 030c 	bic.w	r3, r3, #12
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	430b      	orrs	r3, r1
 800261a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <UART_SetConfig+0x114>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d103      	bne.n	8002644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800263c:	f7ff fb4e 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	e002      	b.n	800264a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002644:	f7ff fb36 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009a      	lsls	r2, r3, #2
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <UART_SetConfig+0x118>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	0119      	lsls	r1, r3, #4
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	009a      	lsls	r2, r3, #2
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <UART_SetConfig+0x118>)
 8002682:	fba3 0302 	umull	r0, r3, r3, r2
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2064      	movs	r0, #100	; 0x64
 800268a:	fb00 f303 	mul.w	r3, r0, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <UART_SetConfig+0x118>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a0:	4419      	add	r1, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <UART_SetConfig+0x118>)
 80026ba:	fba3 0302 	umull	r0, r3, r3, r2
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2064      	movs	r0, #100	; 0x64
 80026c2:	fb00 f303 	mul.w	r3, r0, r3
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	3332      	adds	r3, #50	; 0x32
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <UART_SetConfig+0x118>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	440a      	add	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40013800 	.word	0x40013800
 80026ec:	51eb851f 	.word	0x51eb851f

080026f0 <__errno>:
 80026f0:	4b01      	ldr	r3, [pc, #4]	; (80026f8 <__errno+0x8>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2000000c 	.word	0x2000000c

080026fc <__libc_init_array>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	2600      	movs	r6, #0
 8002700:	4d0c      	ldr	r5, [pc, #48]	; (8002734 <__libc_init_array+0x38>)
 8002702:	4c0d      	ldr	r4, [pc, #52]	; (8002738 <__libc_init_array+0x3c>)
 8002704:	1b64      	subs	r4, r4, r5
 8002706:	10a4      	asrs	r4, r4, #2
 8002708:	42a6      	cmp	r6, r4
 800270a:	d109      	bne.n	8002720 <__libc_init_array+0x24>
 800270c:	f000 fc70 	bl	8002ff0 <_init>
 8002710:	2600      	movs	r6, #0
 8002712:	4d0a      	ldr	r5, [pc, #40]	; (800273c <__libc_init_array+0x40>)
 8002714:	4c0a      	ldr	r4, [pc, #40]	; (8002740 <__libc_init_array+0x44>)
 8002716:	1b64      	subs	r4, r4, r5
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	42a6      	cmp	r6, r4
 800271c:	d105      	bne.n	800272a <__libc_init_array+0x2e>
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	f855 3b04 	ldr.w	r3, [r5], #4
 8002724:	4798      	blx	r3
 8002726:	3601      	adds	r6, #1
 8002728:	e7ee      	b.n	8002708 <__libc_init_array+0xc>
 800272a:	f855 3b04 	ldr.w	r3, [r5], #4
 800272e:	4798      	blx	r3
 8002730:	3601      	adds	r6, #1
 8002732:	e7f2      	b.n	800271a <__libc_init_array+0x1e>
 8002734:	08003278 	.word	0x08003278
 8002738:	08003278 	.word	0x08003278
 800273c:	08003278 	.word	0x08003278
 8002740:	0800327c 	.word	0x0800327c

08002744 <memset>:
 8002744:	4603      	mov	r3, r0
 8002746:	4402      	add	r2, r0
 8002748:	4293      	cmp	r3, r2
 800274a:	d100      	bne.n	800274e <memset+0xa>
 800274c:	4770      	bx	lr
 800274e:	f803 1b01 	strb.w	r1, [r3], #1
 8002752:	e7f9      	b.n	8002748 <memset+0x4>

08002754 <sniprintf>:
 8002754:	b40c      	push	{r2, r3}
 8002756:	b530      	push	{r4, r5, lr}
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <sniprintf+0x64>)
 800275a:	1e0c      	subs	r4, r1, #0
 800275c:	681d      	ldr	r5, [r3, #0]
 800275e:	b09d      	sub	sp, #116	; 0x74
 8002760:	da08      	bge.n	8002774 <sniprintf+0x20>
 8002762:	238b      	movs	r3, #139	; 0x8b
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	b01d      	add	sp, #116	; 0x74
 800276c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002770:	b002      	add	sp, #8
 8002772:	4770      	bx	lr
 8002774:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002778:	f8ad 3014 	strh.w	r3, [sp, #20]
 800277c:	bf0c      	ite	eq
 800277e:	4623      	moveq	r3, r4
 8002780:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002784:	9304      	str	r3, [sp, #16]
 8002786:	9307      	str	r3, [sp, #28]
 8002788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278c:	9002      	str	r0, [sp, #8]
 800278e:	9006      	str	r0, [sp, #24]
 8002790:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002794:	4628      	mov	r0, r5
 8002796:	ab21      	add	r3, sp, #132	; 0x84
 8002798:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800279a:	a902      	add	r1, sp, #8
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	f000 f869 	bl	8002874 <_svfiprintf_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	bfbc      	itt	lt
 80027a6:	238b      	movlt	r3, #139	; 0x8b
 80027a8:	602b      	strlt	r3, [r5, #0]
 80027aa:	2c00      	cmp	r4, #0
 80027ac:	d0dd      	beq.n	800276a <sniprintf+0x16>
 80027ae:	2200      	movs	r2, #0
 80027b0:	9b02      	ldr	r3, [sp, #8]
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e7d9      	b.n	800276a <sniprintf+0x16>
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c

080027bc <__ssputs_r>:
 80027bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	688e      	ldr	r6, [r1, #8]
 80027c2:	4682      	mov	sl, r0
 80027c4:	429e      	cmp	r6, r3
 80027c6:	460c      	mov	r4, r1
 80027c8:	4690      	mov	r8, r2
 80027ca:	461f      	mov	r7, r3
 80027cc:	d838      	bhi.n	8002840 <__ssputs_r+0x84>
 80027ce:	898a      	ldrh	r2, [r1, #12]
 80027d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027d4:	d032      	beq.n	800283c <__ssputs_r+0x80>
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	6909      	ldr	r1, [r1, #16]
 80027da:	3301      	adds	r3, #1
 80027dc:	eba5 0901 	sub.w	r9, r5, r1
 80027e0:	6965      	ldr	r5, [r4, #20]
 80027e2:	444b      	add	r3, r9
 80027e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027ec:	106d      	asrs	r5, r5, #1
 80027ee:	429d      	cmp	r5, r3
 80027f0:	bf38      	it	cc
 80027f2:	461d      	movcc	r5, r3
 80027f4:	0553      	lsls	r3, r2, #21
 80027f6:	d531      	bpl.n	800285c <__ssputs_r+0xa0>
 80027f8:	4629      	mov	r1, r5
 80027fa:	f000 fb53 	bl	8002ea4 <_malloc_r>
 80027fe:	4606      	mov	r6, r0
 8002800:	b950      	cbnz	r0, 8002818 <__ssputs_r+0x5c>
 8002802:	230c      	movs	r3, #12
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f8ca 3000 	str.w	r3, [sl]
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002812:	81a3      	strh	r3, [r4, #12]
 8002814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002818:	464a      	mov	r2, r9
 800281a:	6921      	ldr	r1, [r4, #16]
 800281c:	f000 face 	bl	8002dbc <memcpy>
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	81a3      	strh	r3, [r4, #12]
 800282c:	6126      	str	r6, [r4, #16]
 800282e:	444e      	add	r6, r9
 8002830:	6026      	str	r6, [r4, #0]
 8002832:	463e      	mov	r6, r7
 8002834:	6165      	str	r5, [r4, #20]
 8002836:	eba5 0509 	sub.w	r5, r5, r9
 800283a:	60a5      	str	r5, [r4, #8]
 800283c:	42be      	cmp	r6, r7
 800283e:	d900      	bls.n	8002842 <__ssputs_r+0x86>
 8002840:	463e      	mov	r6, r7
 8002842:	4632      	mov	r2, r6
 8002844:	4641      	mov	r1, r8
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	f000 fac6 	bl	8002dd8 <memmove>
 800284c:	68a3      	ldr	r3, [r4, #8]
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	1b9b      	subs	r3, r3, r6
 8002852:	4432      	add	r2, r6
 8002854:	2000      	movs	r0, #0
 8002856:	60a3      	str	r3, [r4, #8]
 8002858:	6022      	str	r2, [r4, #0]
 800285a:	e7db      	b.n	8002814 <__ssputs_r+0x58>
 800285c:	462a      	mov	r2, r5
 800285e:	f000 fb7b 	bl	8002f58 <_realloc_r>
 8002862:	4606      	mov	r6, r0
 8002864:	2800      	cmp	r0, #0
 8002866:	d1e1      	bne.n	800282c <__ssputs_r+0x70>
 8002868:	4650      	mov	r0, sl
 800286a:	6921      	ldr	r1, [r4, #16]
 800286c:	f000 face 	bl	8002e0c <_free_r>
 8002870:	e7c7      	b.n	8002802 <__ssputs_r+0x46>
	...

08002874 <_svfiprintf_r>:
 8002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002878:	4698      	mov	r8, r3
 800287a:	898b      	ldrh	r3, [r1, #12]
 800287c:	4607      	mov	r7, r0
 800287e:	061b      	lsls	r3, r3, #24
 8002880:	460d      	mov	r5, r1
 8002882:	4614      	mov	r4, r2
 8002884:	b09d      	sub	sp, #116	; 0x74
 8002886:	d50e      	bpl.n	80028a6 <_svfiprintf_r+0x32>
 8002888:	690b      	ldr	r3, [r1, #16]
 800288a:	b963      	cbnz	r3, 80028a6 <_svfiprintf_r+0x32>
 800288c:	2140      	movs	r1, #64	; 0x40
 800288e:	f000 fb09 	bl	8002ea4 <_malloc_r>
 8002892:	6028      	str	r0, [r5, #0]
 8002894:	6128      	str	r0, [r5, #16]
 8002896:	b920      	cbnz	r0, 80028a2 <_svfiprintf_r+0x2e>
 8002898:	230c      	movs	r3, #12
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	e0d1      	b.n	8002a46 <_svfiprintf_r+0x1d2>
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	616b      	str	r3, [r5, #20]
 80028a6:	2300      	movs	r3, #0
 80028a8:	9309      	str	r3, [sp, #36]	; 0x24
 80028aa:	2320      	movs	r3, #32
 80028ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028b0:	2330      	movs	r3, #48	; 0x30
 80028b2:	f04f 0901 	mov.w	r9, #1
 80028b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80028ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002a60 <_svfiprintf_r+0x1ec>
 80028be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c2:	4623      	mov	r3, r4
 80028c4:	469a      	mov	sl, r3
 80028c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028ca:	b10a      	cbz	r2, 80028d0 <_svfiprintf_r+0x5c>
 80028cc:	2a25      	cmp	r2, #37	; 0x25
 80028ce:	d1f9      	bne.n	80028c4 <_svfiprintf_r+0x50>
 80028d0:	ebba 0b04 	subs.w	fp, sl, r4
 80028d4:	d00b      	beq.n	80028ee <_svfiprintf_r+0x7a>
 80028d6:	465b      	mov	r3, fp
 80028d8:	4622      	mov	r2, r4
 80028da:	4629      	mov	r1, r5
 80028dc:	4638      	mov	r0, r7
 80028de:	f7ff ff6d 	bl	80027bc <__ssputs_r>
 80028e2:	3001      	adds	r0, #1
 80028e4:	f000 80aa 	beq.w	8002a3c <_svfiprintf_r+0x1c8>
 80028e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ea:	445a      	add	r2, fp
 80028ec:	9209      	str	r2, [sp, #36]	; 0x24
 80028ee:	f89a 3000 	ldrb.w	r3, [sl]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80a2 	beq.w	8002a3c <_svfiprintf_r+0x1c8>
 80028f8:	2300      	movs	r3, #0
 80028fa:	f04f 32ff 	mov.w	r2, #4294967295
 80028fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002902:	f10a 0a01 	add.w	sl, sl, #1
 8002906:	9304      	str	r3, [sp, #16]
 8002908:	9307      	str	r3, [sp, #28]
 800290a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800290e:	931a      	str	r3, [sp, #104]	; 0x68
 8002910:	4654      	mov	r4, sl
 8002912:	2205      	movs	r2, #5
 8002914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002918:	4851      	ldr	r0, [pc, #324]	; (8002a60 <_svfiprintf_r+0x1ec>)
 800291a:	f000 fa41 	bl	8002da0 <memchr>
 800291e:	9a04      	ldr	r2, [sp, #16]
 8002920:	b9d8      	cbnz	r0, 800295a <_svfiprintf_r+0xe6>
 8002922:	06d0      	lsls	r0, r2, #27
 8002924:	bf44      	itt	mi
 8002926:	2320      	movmi	r3, #32
 8002928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800292c:	0711      	lsls	r1, r2, #28
 800292e:	bf44      	itt	mi
 8002930:	232b      	movmi	r3, #43	; 0x2b
 8002932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002936:	f89a 3000 	ldrb.w	r3, [sl]
 800293a:	2b2a      	cmp	r3, #42	; 0x2a
 800293c:	d015      	beq.n	800296a <_svfiprintf_r+0xf6>
 800293e:	4654      	mov	r4, sl
 8002940:	2000      	movs	r0, #0
 8002942:	f04f 0c0a 	mov.w	ip, #10
 8002946:	9a07      	ldr	r2, [sp, #28]
 8002948:	4621      	mov	r1, r4
 800294a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800294e:	3b30      	subs	r3, #48	; 0x30
 8002950:	2b09      	cmp	r3, #9
 8002952:	d94e      	bls.n	80029f2 <_svfiprintf_r+0x17e>
 8002954:	b1b0      	cbz	r0, 8002984 <_svfiprintf_r+0x110>
 8002956:	9207      	str	r2, [sp, #28]
 8002958:	e014      	b.n	8002984 <_svfiprintf_r+0x110>
 800295a:	eba0 0308 	sub.w	r3, r0, r8
 800295e:	fa09 f303 	lsl.w	r3, r9, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	46a2      	mov	sl, r4
 8002966:	9304      	str	r3, [sp, #16]
 8002968:	e7d2      	b.n	8002910 <_svfiprintf_r+0x9c>
 800296a:	9b03      	ldr	r3, [sp, #12]
 800296c:	1d19      	adds	r1, r3, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	9103      	str	r1, [sp, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	bfbb      	ittet	lt
 8002976:	425b      	neglt	r3, r3
 8002978:	f042 0202 	orrlt.w	r2, r2, #2
 800297c:	9307      	strge	r3, [sp, #28]
 800297e:	9307      	strlt	r3, [sp, #28]
 8002980:	bfb8      	it	lt
 8002982:	9204      	strlt	r2, [sp, #16]
 8002984:	7823      	ldrb	r3, [r4, #0]
 8002986:	2b2e      	cmp	r3, #46	; 0x2e
 8002988:	d10c      	bne.n	80029a4 <_svfiprintf_r+0x130>
 800298a:	7863      	ldrb	r3, [r4, #1]
 800298c:	2b2a      	cmp	r3, #42	; 0x2a
 800298e:	d135      	bne.n	80029fc <_svfiprintf_r+0x188>
 8002990:	9b03      	ldr	r3, [sp, #12]
 8002992:	3402      	adds	r4, #2
 8002994:	1d1a      	adds	r2, r3, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	9203      	str	r2, [sp, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	bfb8      	it	lt
 800299e:	f04f 33ff 	movlt.w	r3, #4294967295
 80029a2:	9305      	str	r3, [sp, #20]
 80029a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a70 <_svfiprintf_r+0x1fc>
 80029a8:	2203      	movs	r2, #3
 80029aa:	4650      	mov	r0, sl
 80029ac:	7821      	ldrb	r1, [r4, #0]
 80029ae:	f000 f9f7 	bl	8002da0 <memchr>
 80029b2:	b140      	cbz	r0, 80029c6 <_svfiprintf_r+0x152>
 80029b4:	2340      	movs	r3, #64	; 0x40
 80029b6:	eba0 000a 	sub.w	r0, r0, sl
 80029ba:	fa03 f000 	lsl.w	r0, r3, r0
 80029be:	9b04      	ldr	r3, [sp, #16]
 80029c0:	3401      	adds	r4, #1
 80029c2:	4303      	orrs	r3, r0
 80029c4:	9304      	str	r3, [sp, #16]
 80029c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ca:	2206      	movs	r2, #6
 80029cc:	4825      	ldr	r0, [pc, #148]	; (8002a64 <_svfiprintf_r+0x1f0>)
 80029ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029d2:	f000 f9e5 	bl	8002da0 <memchr>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d038      	beq.n	8002a4c <_svfiprintf_r+0x1d8>
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <_svfiprintf_r+0x1f4>)
 80029dc:	bb1b      	cbnz	r3, 8002a26 <_svfiprintf_r+0x1b2>
 80029de:	9b03      	ldr	r3, [sp, #12]
 80029e0:	3307      	adds	r3, #7
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	3308      	adds	r3, #8
 80029e8:	9303      	str	r3, [sp, #12]
 80029ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029ec:	4433      	add	r3, r6
 80029ee:	9309      	str	r3, [sp, #36]	; 0x24
 80029f0:	e767      	b.n	80028c2 <_svfiprintf_r+0x4e>
 80029f2:	460c      	mov	r4, r1
 80029f4:	2001      	movs	r0, #1
 80029f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80029fa:	e7a5      	b.n	8002948 <_svfiprintf_r+0xd4>
 80029fc:	2300      	movs	r3, #0
 80029fe:	f04f 0c0a 	mov.w	ip, #10
 8002a02:	4619      	mov	r1, r3
 8002a04:	3401      	adds	r4, #1
 8002a06:	9305      	str	r3, [sp, #20]
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a0e:	3a30      	subs	r2, #48	; 0x30
 8002a10:	2a09      	cmp	r2, #9
 8002a12:	d903      	bls.n	8002a1c <_svfiprintf_r+0x1a8>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0c5      	beq.n	80029a4 <_svfiprintf_r+0x130>
 8002a18:	9105      	str	r1, [sp, #20]
 8002a1a:	e7c3      	b.n	80029a4 <_svfiprintf_r+0x130>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	2301      	movs	r3, #1
 8002a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a24:	e7f0      	b.n	8002a08 <_svfiprintf_r+0x194>
 8002a26:	ab03      	add	r3, sp, #12
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	462a      	mov	r2, r5
 8002a2c:	4638      	mov	r0, r7
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <_svfiprintf_r+0x1f8>)
 8002a30:	a904      	add	r1, sp, #16
 8002a32:	f3af 8000 	nop.w
 8002a36:	1c42      	adds	r2, r0, #1
 8002a38:	4606      	mov	r6, r0
 8002a3a:	d1d6      	bne.n	80029ea <_svfiprintf_r+0x176>
 8002a3c:	89ab      	ldrh	r3, [r5, #12]
 8002a3e:	065b      	lsls	r3, r3, #25
 8002a40:	f53f af2c 	bmi.w	800289c <_svfiprintf_r+0x28>
 8002a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a46:	b01d      	add	sp, #116	; 0x74
 8002a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a4c:	ab03      	add	r3, sp, #12
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	462a      	mov	r2, r5
 8002a52:	4638      	mov	r0, r7
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <_svfiprintf_r+0x1f8>)
 8002a56:	a904      	add	r1, sp, #16
 8002a58:	f000 f87c 	bl	8002b54 <_printf_i>
 8002a5c:	e7eb      	b.n	8002a36 <_svfiprintf_r+0x1c2>
 8002a5e:	bf00      	nop
 8002a60:	08003244 	.word	0x08003244
 8002a64:	0800324e 	.word	0x0800324e
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	080027bd 	.word	0x080027bd
 8002a70:	0800324a 	.word	0x0800324a

08002a74 <_printf_common>:
 8002a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	4616      	mov	r6, r2
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	688a      	ldr	r2, [r1, #8]
 8002a7e:	690b      	ldr	r3, [r1, #16]
 8002a80:	4607      	mov	r7, r0
 8002a82:	4293      	cmp	r3, r2
 8002a84:	bfb8      	it	lt
 8002a86:	4613      	movlt	r3, r2
 8002a88:	6033      	str	r3, [r6, #0]
 8002a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a8e:	460c      	mov	r4, r1
 8002a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a94:	b10a      	cbz	r2, 8002a9a <_printf_common+0x26>
 8002a96:	3301      	adds	r3, #1
 8002a98:	6033      	str	r3, [r6, #0]
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	0699      	lsls	r1, r3, #26
 8002a9e:	bf42      	ittt	mi
 8002aa0:	6833      	ldrmi	r3, [r6, #0]
 8002aa2:	3302      	addmi	r3, #2
 8002aa4:	6033      	strmi	r3, [r6, #0]
 8002aa6:	6825      	ldr	r5, [r4, #0]
 8002aa8:	f015 0506 	ands.w	r5, r5, #6
 8002aac:	d106      	bne.n	8002abc <_printf_common+0x48>
 8002aae:	f104 0a19 	add.w	sl, r4, #25
 8002ab2:	68e3      	ldr	r3, [r4, #12]
 8002ab4:	6832      	ldr	r2, [r6, #0]
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	42ab      	cmp	r3, r5
 8002aba:	dc28      	bgt.n	8002b0e <_printf_common+0x9a>
 8002abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ac0:	1e13      	subs	r3, r2, #0
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	bf18      	it	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	0692      	lsls	r2, r2, #26
 8002aca:	d42d      	bmi.n	8002b28 <_printf_common+0xb4>
 8002acc:	4649      	mov	r1, r9
 8002ace:	4638      	mov	r0, r7
 8002ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad4:	47c0      	blx	r8
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	d020      	beq.n	8002b1c <_printf_common+0xa8>
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	68e5      	ldr	r5, [r4, #12]
 8002ade:	f003 0306 	and.w	r3, r3, #6
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	bf18      	it	ne
 8002ae6:	2500      	movne	r5, #0
 8002ae8:	6832      	ldr	r2, [r6, #0]
 8002aea:	f04f 0600 	mov.w	r6, #0
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	bf08      	it	eq
 8002af2:	1aad      	subeq	r5, r5, r2
 8002af4:	6922      	ldr	r2, [r4, #16]
 8002af6:	bf08      	it	eq
 8002af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bfc4      	itt	gt
 8002b00:	1a9b      	subgt	r3, r3, r2
 8002b02:	18ed      	addgt	r5, r5, r3
 8002b04:	341a      	adds	r4, #26
 8002b06:	42b5      	cmp	r5, r6
 8002b08:	d11a      	bne.n	8002b40 <_printf_common+0xcc>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e008      	b.n	8002b20 <_printf_common+0xac>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4652      	mov	r2, sl
 8002b12:	4649      	mov	r1, r9
 8002b14:	4638      	mov	r0, r7
 8002b16:	47c0      	blx	r8
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d103      	bne.n	8002b24 <_printf_common+0xb0>
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7c4      	b.n	8002ab2 <_printf_common+0x3e>
 8002b28:	2030      	movs	r0, #48	; 0x30
 8002b2a:	18e1      	adds	r1, r4, r3
 8002b2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b36:	4422      	add	r2, r4
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b3e:	e7c5      	b.n	8002acc <_printf_common+0x58>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4622      	mov	r2, r4
 8002b44:	4649      	mov	r1, r9
 8002b46:	4638      	mov	r0, r7
 8002b48:	47c0      	blx	r8
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d0e6      	beq.n	8002b1c <_printf_common+0xa8>
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7d9      	b.n	8002b06 <_printf_common+0x92>
	...

08002b54 <_printf_i>:
 8002b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b58:	460c      	mov	r4, r1
 8002b5a:	7e27      	ldrb	r7, [r4, #24]
 8002b5c:	4691      	mov	r9, r2
 8002b5e:	2f78      	cmp	r7, #120	; 0x78
 8002b60:	4680      	mov	r8, r0
 8002b62:	469a      	mov	sl, r3
 8002b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b6a:	d807      	bhi.n	8002b7c <_printf_i+0x28>
 8002b6c:	2f62      	cmp	r7, #98	; 0x62
 8002b6e:	d80a      	bhi.n	8002b86 <_printf_i+0x32>
 8002b70:	2f00      	cmp	r7, #0
 8002b72:	f000 80d9 	beq.w	8002d28 <_printf_i+0x1d4>
 8002b76:	2f58      	cmp	r7, #88	; 0x58
 8002b78:	f000 80a4 	beq.w	8002cc4 <_printf_i+0x170>
 8002b7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b84:	e03a      	b.n	8002bfc <_printf_i+0xa8>
 8002b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b8a:	2b15      	cmp	r3, #21
 8002b8c:	d8f6      	bhi.n	8002b7c <_printf_i+0x28>
 8002b8e:	a001      	add	r0, pc, #4	; (adr r0, 8002b94 <_printf_i+0x40>)
 8002b90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b94:	08002bed 	.word	0x08002bed
 8002b98:	08002c01 	.word	0x08002c01
 8002b9c:	08002b7d 	.word	0x08002b7d
 8002ba0:	08002b7d 	.word	0x08002b7d
 8002ba4:	08002b7d 	.word	0x08002b7d
 8002ba8:	08002b7d 	.word	0x08002b7d
 8002bac:	08002c01 	.word	0x08002c01
 8002bb0:	08002b7d 	.word	0x08002b7d
 8002bb4:	08002b7d 	.word	0x08002b7d
 8002bb8:	08002b7d 	.word	0x08002b7d
 8002bbc:	08002b7d 	.word	0x08002b7d
 8002bc0:	08002d0f 	.word	0x08002d0f
 8002bc4:	08002c31 	.word	0x08002c31
 8002bc8:	08002cf1 	.word	0x08002cf1
 8002bcc:	08002b7d 	.word	0x08002b7d
 8002bd0:	08002b7d 	.word	0x08002b7d
 8002bd4:	08002d31 	.word	0x08002d31
 8002bd8:	08002b7d 	.word	0x08002b7d
 8002bdc:	08002c31 	.word	0x08002c31
 8002be0:	08002b7d 	.word	0x08002b7d
 8002be4:	08002b7d 	.word	0x08002b7d
 8002be8:	08002cf9 	.word	0x08002cf9
 8002bec:	680b      	ldr	r3, [r1, #0]
 8002bee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002bf2:	1d1a      	adds	r2, r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	600a      	str	r2, [r1, #0]
 8002bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0a4      	b.n	8002d4a <_printf_i+0x1f6>
 8002c00:	6825      	ldr	r5, [r4, #0]
 8002c02:	6808      	ldr	r0, [r1, #0]
 8002c04:	062e      	lsls	r6, r5, #24
 8002c06:	f100 0304 	add.w	r3, r0, #4
 8002c0a:	d50a      	bpl.n	8002c22 <_printf_i+0xce>
 8002c0c:	6805      	ldr	r5, [r0, #0]
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	da03      	bge.n	8002c1c <_printf_i+0xc8>
 8002c14:	232d      	movs	r3, #45	; 0x2d
 8002c16:	426d      	negs	r5, r5
 8002c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	485e      	ldr	r0, [pc, #376]	; (8002d98 <_printf_i+0x244>)
 8002c20:	e019      	b.n	8002c56 <_printf_i+0x102>
 8002c22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c26:	6805      	ldr	r5, [r0, #0]
 8002c28:	600b      	str	r3, [r1, #0]
 8002c2a:	bf18      	it	ne
 8002c2c:	b22d      	sxthne	r5, r5
 8002c2e:	e7ef      	b.n	8002c10 <_printf_i+0xbc>
 8002c30:	680b      	ldr	r3, [r1, #0]
 8002c32:	6825      	ldr	r5, [r4, #0]
 8002c34:	1d18      	adds	r0, r3, #4
 8002c36:	6008      	str	r0, [r1, #0]
 8002c38:	0628      	lsls	r0, r5, #24
 8002c3a:	d501      	bpl.n	8002c40 <_printf_i+0xec>
 8002c3c:	681d      	ldr	r5, [r3, #0]
 8002c3e:	e002      	b.n	8002c46 <_printf_i+0xf2>
 8002c40:	0669      	lsls	r1, r5, #25
 8002c42:	d5fb      	bpl.n	8002c3c <_printf_i+0xe8>
 8002c44:	881d      	ldrh	r5, [r3, #0]
 8002c46:	2f6f      	cmp	r7, #111	; 0x6f
 8002c48:	bf0c      	ite	eq
 8002c4a:	2308      	moveq	r3, #8
 8002c4c:	230a      	movne	r3, #10
 8002c4e:	4852      	ldr	r0, [pc, #328]	; (8002d98 <_printf_i+0x244>)
 8002c50:	2100      	movs	r1, #0
 8002c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c56:	6866      	ldr	r6, [r4, #4]
 8002c58:	2e00      	cmp	r6, #0
 8002c5a:	bfa8      	it	ge
 8002c5c:	6821      	ldrge	r1, [r4, #0]
 8002c5e:	60a6      	str	r6, [r4, #8]
 8002c60:	bfa4      	itt	ge
 8002c62:	f021 0104 	bicge.w	r1, r1, #4
 8002c66:	6021      	strge	r1, [r4, #0]
 8002c68:	b90d      	cbnz	r5, 8002c6e <_printf_i+0x11a>
 8002c6a:	2e00      	cmp	r6, #0
 8002c6c:	d04d      	beq.n	8002d0a <_printf_i+0x1b6>
 8002c6e:	4616      	mov	r6, r2
 8002c70:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c74:	fb03 5711 	mls	r7, r3, r1, r5
 8002c78:	5dc7      	ldrb	r7, [r0, r7]
 8002c7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c7e:	462f      	mov	r7, r5
 8002c80:	42bb      	cmp	r3, r7
 8002c82:	460d      	mov	r5, r1
 8002c84:	d9f4      	bls.n	8002c70 <_printf_i+0x11c>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d10b      	bne.n	8002ca2 <_printf_i+0x14e>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	07df      	lsls	r7, r3, #31
 8002c8e:	d508      	bpl.n	8002ca2 <_printf_i+0x14e>
 8002c90:	6923      	ldr	r3, [r4, #16]
 8002c92:	6861      	ldr	r1, [r4, #4]
 8002c94:	4299      	cmp	r1, r3
 8002c96:	bfde      	ittt	le
 8002c98:	2330      	movle	r3, #48	; 0x30
 8002c9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ca2:	1b92      	subs	r2, r2, r6
 8002ca4:	6122      	str	r2, [r4, #16]
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4640      	mov	r0, r8
 8002cac:	f8cd a000 	str.w	sl, [sp]
 8002cb0:	aa03      	add	r2, sp, #12
 8002cb2:	f7ff fedf 	bl	8002a74 <_printf_common>
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d14c      	bne.n	8002d54 <_printf_i+0x200>
 8002cba:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbe:	b004      	add	sp, #16
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc4:	4834      	ldr	r0, [pc, #208]	; (8002d98 <_printf_i+0x244>)
 8002cc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cca:	680e      	ldr	r6, [r1, #0]
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	f856 5b04 	ldr.w	r5, [r6], #4
 8002cd2:	061f      	lsls	r7, r3, #24
 8002cd4:	600e      	str	r6, [r1, #0]
 8002cd6:	d514      	bpl.n	8002d02 <_printf_i+0x1ae>
 8002cd8:	07d9      	lsls	r1, r3, #31
 8002cda:	bf44      	itt	mi
 8002cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce0:	6023      	strmi	r3, [r4, #0]
 8002ce2:	b91d      	cbnz	r5, 8002cec <_printf_i+0x198>
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f023 0320 	bic.w	r3, r3, #32
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	2310      	movs	r3, #16
 8002cee:	e7af      	b.n	8002c50 <_printf_i+0xfc>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2378      	movs	r3, #120	; 0x78
 8002cfa:	4828      	ldr	r0, [pc, #160]	; (8002d9c <_printf_i+0x248>)
 8002cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d00:	e7e3      	b.n	8002cca <_printf_i+0x176>
 8002d02:	065e      	lsls	r6, r3, #25
 8002d04:	bf48      	it	mi
 8002d06:	b2ad      	uxthmi	r5, r5
 8002d08:	e7e6      	b.n	8002cd8 <_printf_i+0x184>
 8002d0a:	4616      	mov	r6, r2
 8002d0c:	e7bb      	b.n	8002c86 <_printf_i+0x132>
 8002d0e:	680b      	ldr	r3, [r1, #0]
 8002d10:	6826      	ldr	r6, [r4, #0]
 8002d12:	1d1d      	adds	r5, r3, #4
 8002d14:	6960      	ldr	r0, [r4, #20]
 8002d16:	600d      	str	r5, [r1, #0]
 8002d18:	0635      	lsls	r5, r6, #24
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	d501      	bpl.n	8002d22 <_printf_i+0x1ce>
 8002d1e:	6018      	str	r0, [r3, #0]
 8002d20:	e002      	b.n	8002d28 <_printf_i+0x1d4>
 8002d22:	0671      	lsls	r1, r6, #25
 8002d24:	d5fb      	bpl.n	8002d1e <_printf_i+0x1ca>
 8002d26:	8018      	strh	r0, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4616      	mov	r6, r2
 8002d2c:	6123      	str	r3, [r4, #16]
 8002d2e:	e7ba      	b.n	8002ca6 <_printf_i+0x152>
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	1d1a      	adds	r2, r3, #4
 8002d34:	600a      	str	r2, [r1, #0]
 8002d36:	681e      	ldr	r6, [r3, #0]
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	6862      	ldr	r2, [r4, #4]
 8002d3e:	f000 f82f 	bl	8002da0 <memchr>
 8002d42:	b108      	cbz	r0, 8002d48 <_printf_i+0x1f4>
 8002d44:	1b80      	subs	r0, r0, r6
 8002d46:	6060      	str	r0, [r4, #4]
 8002d48:	6863      	ldr	r3, [r4, #4]
 8002d4a:	6123      	str	r3, [r4, #16]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d52:	e7a8      	b.n	8002ca6 <_printf_i+0x152>
 8002d54:	4632      	mov	r2, r6
 8002d56:	4649      	mov	r1, r9
 8002d58:	4640      	mov	r0, r8
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	47d0      	blx	sl
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d0ab      	beq.n	8002cba <_printf_i+0x166>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	079b      	lsls	r3, r3, #30
 8002d66:	d413      	bmi.n	8002d90 <_printf_i+0x23c>
 8002d68:	68e0      	ldr	r0, [r4, #12]
 8002d6a:	9b03      	ldr	r3, [sp, #12]
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	bfb8      	it	lt
 8002d70:	4618      	movlt	r0, r3
 8002d72:	e7a4      	b.n	8002cbe <_printf_i+0x16a>
 8002d74:	2301      	movs	r3, #1
 8002d76:	4632      	mov	r2, r6
 8002d78:	4649      	mov	r1, r9
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	47d0      	blx	sl
 8002d7e:	3001      	adds	r0, #1
 8002d80:	d09b      	beq.n	8002cba <_printf_i+0x166>
 8002d82:	3501      	adds	r5, #1
 8002d84:	68e3      	ldr	r3, [r4, #12]
 8002d86:	9903      	ldr	r1, [sp, #12]
 8002d88:	1a5b      	subs	r3, r3, r1
 8002d8a:	42ab      	cmp	r3, r5
 8002d8c:	dcf2      	bgt.n	8002d74 <_printf_i+0x220>
 8002d8e:	e7eb      	b.n	8002d68 <_printf_i+0x214>
 8002d90:	2500      	movs	r5, #0
 8002d92:	f104 0619 	add.w	r6, r4, #25
 8002d96:	e7f5      	b.n	8002d84 <_printf_i+0x230>
 8002d98:	08003255 	.word	0x08003255
 8002d9c:	08003266 	.word	0x08003266

08002da0 <memchr>:
 8002da0:	4603      	mov	r3, r0
 8002da2:	b510      	push	{r4, lr}
 8002da4:	b2c9      	uxtb	r1, r1
 8002da6:	4402      	add	r2, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	d101      	bne.n	8002db2 <memchr+0x12>
 8002dae:	2000      	movs	r0, #0
 8002db0:	e003      	b.n	8002dba <memchr+0x1a>
 8002db2:	7804      	ldrb	r4, [r0, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	428c      	cmp	r4, r1
 8002db8:	d1f6      	bne.n	8002da8 <memchr+0x8>
 8002dba:	bd10      	pop	{r4, pc}

08002dbc <memcpy>:
 8002dbc:	440a      	add	r2, r1
 8002dbe:	4291      	cmp	r1, r2
 8002dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dc4:	d100      	bne.n	8002dc8 <memcpy+0xc>
 8002dc6:	4770      	bx	lr
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dce:	4291      	cmp	r1, r2
 8002dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dd4:	d1f9      	bne.n	8002dca <memcpy+0xe>
 8002dd6:	bd10      	pop	{r4, pc}

08002dd8 <memmove>:
 8002dd8:	4288      	cmp	r0, r1
 8002dda:	b510      	push	{r4, lr}
 8002ddc:	eb01 0402 	add.w	r4, r1, r2
 8002de0:	d902      	bls.n	8002de8 <memmove+0x10>
 8002de2:	4284      	cmp	r4, r0
 8002de4:	4623      	mov	r3, r4
 8002de6:	d807      	bhi.n	8002df8 <memmove+0x20>
 8002de8:	1e43      	subs	r3, r0, #1
 8002dea:	42a1      	cmp	r1, r4
 8002dec:	d008      	beq.n	8002e00 <memmove+0x28>
 8002dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002df6:	e7f8      	b.n	8002dea <memmove+0x12>
 8002df8:	4601      	mov	r1, r0
 8002dfa:	4402      	add	r2, r0
 8002dfc:	428a      	cmp	r2, r1
 8002dfe:	d100      	bne.n	8002e02 <memmove+0x2a>
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e0a:	e7f7      	b.n	8002dfc <memmove+0x24>

08002e0c <_free_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d043      	beq.n	8002e9c <_free_r+0x90>
 8002e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e18:	1f0c      	subs	r4, r1, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bfb8      	it	lt
 8002e1e:	18e4      	addlt	r4, r4, r3
 8002e20:	f000 f8d0 	bl	8002fc4 <__malloc_lock>
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <_free_r+0x94>)
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	4610      	mov	r0, r2
 8002e2a:	b933      	cbnz	r3, 8002e3a <_free_r+0x2e>
 8002e2c:	6063      	str	r3, [r4, #4]
 8002e2e:	6014      	str	r4, [r2, #0]
 8002e30:	4628      	mov	r0, r5
 8002e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e36:	f000 b8cb 	b.w	8002fd0 <__malloc_unlock>
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	d90a      	bls.n	8002e54 <_free_r+0x48>
 8002e3e:	6821      	ldr	r1, [r4, #0]
 8002e40:	1862      	adds	r2, r4, r1
 8002e42:	4293      	cmp	r3, r2
 8002e44:	bf01      	itttt	eq
 8002e46:	681a      	ldreq	r2, [r3, #0]
 8002e48:	685b      	ldreq	r3, [r3, #4]
 8002e4a:	1852      	addeq	r2, r2, r1
 8002e4c:	6022      	streq	r2, [r4, #0]
 8002e4e:	6063      	str	r3, [r4, #4]
 8002e50:	6004      	str	r4, [r0, #0]
 8002e52:	e7ed      	b.n	8002e30 <_free_r+0x24>
 8002e54:	461a      	mov	r2, r3
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	b10b      	cbz	r3, 8002e5e <_free_r+0x52>
 8002e5a:	42a3      	cmp	r3, r4
 8002e5c:	d9fa      	bls.n	8002e54 <_free_r+0x48>
 8002e5e:	6811      	ldr	r1, [r2, #0]
 8002e60:	1850      	adds	r0, r2, r1
 8002e62:	42a0      	cmp	r0, r4
 8002e64:	d10b      	bne.n	8002e7e <_free_r+0x72>
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	4401      	add	r1, r0
 8002e6a:	1850      	adds	r0, r2, r1
 8002e6c:	4283      	cmp	r3, r0
 8002e6e:	6011      	str	r1, [r2, #0]
 8002e70:	d1de      	bne.n	8002e30 <_free_r+0x24>
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4401      	add	r1, r0
 8002e78:	6011      	str	r1, [r2, #0]
 8002e7a:	6053      	str	r3, [r2, #4]
 8002e7c:	e7d8      	b.n	8002e30 <_free_r+0x24>
 8002e7e:	d902      	bls.n	8002e86 <_free_r+0x7a>
 8002e80:	230c      	movs	r3, #12
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	e7d4      	b.n	8002e30 <_free_r+0x24>
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	1821      	adds	r1, r4, r0
 8002e8a:	428b      	cmp	r3, r1
 8002e8c:	bf01      	itttt	eq
 8002e8e:	6819      	ldreq	r1, [r3, #0]
 8002e90:	685b      	ldreq	r3, [r3, #4]
 8002e92:	1809      	addeq	r1, r1, r0
 8002e94:	6021      	streq	r1, [r4, #0]
 8002e96:	6063      	str	r3, [r4, #4]
 8002e98:	6054      	str	r4, [r2, #4]
 8002e9a:	e7c9      	b.n	8002e30 <_free_r+0x24>
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000090 	.word	0x20000090

08002ea4 <_malloc_r>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	1ccd      	adds	r5, r1, #3
 8002ea8:	f025 0503 	bic.w	r5, r5, #3
 8002eac:	3508      	adds	r5, #8
 8002eae:	2d0c      	cmp	r5, #12
 8002eb0:	bf38      	it	cc
 8002eb2:	250c      	movcc	r5, #12
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	db01      	blt.n	8002ebe <_malloc_r+0x1a>
 8002eba:	42a9      	cmp	r1, r5
 8002ebc:	d903      	bls.n	8002ec6 <_malloc_r+0x22>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	6033      	str	r3, [r6, #0]
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec6:	f000 f87d 	bl	8002fc4 <__malloc_lock>
 8002eca:	4921      	ldr	r1, [pc, #132]	; (8002f50 <_malloc_r+0xac>)
 8002ecc:	680a      	ldr	r2, [r1, #0]
 8002ece:	4614      	mov	r4, r2
 8002ed0:	b99c      	cbnz	r4, 8002efa <_malloc_r+0x56>
 8002ed2:	4f20      	ldr	r7, [pc, #128]	; (8002f54 <_malloc_r+0xb0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b923      	cbnz	r3, 8002ee2 <_malloc_r+0x3e>
 8002ed8:	4621      	mov	r1, r4
 8002eda:	4630      	mov	r0, r6
 8002edc:	f000 f862 	bl	8002fa4 <_sbrk_r>
 8002ee0:	6038      	str	r0, [r7, #0]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f000 f85d 	bl	8002fa4 <_sbrk_r>
 8002eea:	1c43      	adds	r3, r0, #1
 8002eec:	d123      	bne.n	8002f36 <_malloc_r+0x92>
 8002eee:	230c      	movs	r3, #12
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	6033      	str	r3, [r6, #0]
 8002ef4:	f000 f86c 	bl	8002fd0 <__malloc_unlock>
 8002ef8:	e7e3      	b.n	8002ec2 <_malloc_r+0x1e>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	1b5b      	subs	r3, r3, r5
 8002efe:	d417      	bmi.n	8002f30 <_malloc_r+0x8c>
 8002f00:	2b0b      	cmp	r3, #11
 8002f02:	d903      	bls.n	8002f0c <_malloc_r+0x68>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	441c      	add	r4, r3
 8002f08:	6025      	str	r5, [r4, #0]
 8002f0a:	e004      	b.n	8002f16 <_malloc_r+0x72>
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	42a2      	cmp	r2, r4
 8002f10:	bf0c      	ite	eq
 8002f12:	600b      	streq	r3, [r1, #0]
 8002f14:	6053      	strne	r3, [r2, #4]
 8002f16:	4630      	mov	r0, r6
 8002f18:	f000 f85a 	bl	8002fd0 <__malloc_unlock>
 8002f1c:	f104 000b 	add.w	r0, r4, #11
 8002f20:	1d23      	adds	r3, r4, #4
 8002f22:	f020 0007 	bic.w	r0, r0, #7
 8002f26:	1ac2      	subs	r2, r0, r3
 8002f28:	d0cc      	beq.n	8002ec4 <_malloc_r+0x20>
 8002f2a:	1a1b      	subs	r3, r3, r0
 8002f2c:	50a3      	str	r3, [r4, r2]
 8002f2e:	e7c9      	b.n	8002ec4 <_malloc_r+0x20>
 8002f30:	4622      	mov	r2, r4
 8002f32:	6864      	ldr	r4, [r4, #4]
 8002f34:	e7cc      	b.n	8002ed0 <_malloc_r+0x2c>
 8002f36:	1cc4      	adds	r4, r0, #3
 8002f38:	f024 0403 	bic.w	r4, r4, #3
 8002f3c:	42a0      	cmp	r0, r4
 8002f3e:	d0e3      	beq.n	8002f08 <_malloc_r+0x64>
 8002f40:	1a21      	subs	r1, r4, r0
 8002f42:	4630      	mov	r0, r6
 8002f44:	f000 f82e 	bl	8002fa4 <_sbrk_r>
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d1dd      	bne.n	8002f08 <_malloc_r+0x64>
 8002f4c:	e7cf      	b.n	8002eee <_malloc_r+0x4a>
 8002f4e:	bf00      	nop
 8002f50:	20000090 	.word	0x20000090
 8002f54:	20000094 	.word	0x20000094

08002f58 <_realloc_r>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	4607      	mov	r7, r0
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	460e      	mov	r6, r1
 8002f60:	b921      	cbnz	r1, 8002f6c <_realloc_r+0x14>
 8002f62:	4611      	mov	r1, r2
 8002f64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f68:	f7ff bf9c 	b.w	8002ea4 <_malloc_r>
 8002f6c:	b922      	cbnz	r2, 8002f78 <_realloc_r+0x20>
 8002f6e:	f7ff ff4d 	bl	8002e0c <_free_r>
 8002f72:	4625      	mov	r5, r4
 8002f74:	4628      	mov	r0, r5
 8002f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f78:	f000 f830 	bl	8002fdc <_malloc_usable_size_r>
 8002f7c:	42a0      	cmp	r0, r4
 8002f7e:	d20f      	bcs.n	8002fa0 <_realloc_r+0x48>
 8002f80:	4621      	mov	r1, r4
 8002f82:	4638      	mov	r0, r7
 8002f84:	f7ff ff8e 	bl	8002ea4 <_malloc_r>
 8002f88:	4605      	mov	r5, r0
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d0f2      	beq.n	8002f74 <_realloc_r+0x1c>
 8002f8e:	4631      	mov	r1, r6
 8002f90:	4622      	mov	r2, r4
 8002f92:	f7ff ff13 	bl	8002dbc <memcpy>
 8002f96:	4631      	mov	r1, r6
 8002f98:	4638      	mov	r0, r7
 8002f9a:	f7ff ff37 	bl	8002e0c <_free_r>
 8002f9e:	e7e9      	b.n	8002f74 <_realloc_r+0x1c>
 8002fa0:	4635      	mov	r5, r6
 8002fa2:	e7e7      	b.n	8002f74 <_realloc_r+0x1c>

08002fa4 <_sbrk_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	4d05      	ldr	r5, [pc, #20]	; (8002fc0 <_sbrk_r+0x1c>)
 8002faa:	4604      	mov	r4, r0
 8002fac:	4608      	mov	r0, r1
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	f7fd fc82 	bl	80008b8 <_sbrk>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d102      	bne.n	8002fbe <_sbrk_r+0x1a>
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	b103      	cbz	r3, 8002fbe <_sbrk_r+0x1a>
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	20000100 	.word	0x20000100

08002fc4 <__malloc_lock>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <__malloc_lock+0x8>)
 8002fc6:	f000 b811 	b.w	8002fec <__retarget_lock_acquire_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000108 	.word	0x20000108

08002fd0 <__malloc_unlock>:
 8002fd0:	4801      	ldr	r0, [pc, #4]	; (8002fd8 <__malloc_unlock+0x8>)
 8002fd2:	f000 b80c 	b.w	8002fee <__retarget_lock_release_recursive>
 8002fd6:	bf00      	nop
 8002fd8:	20000108 	.word	0x20000108

08002fdc <_malloc_usable_size_r>:
 8002fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe0:	1f18      	subs	r0, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bfbc      	itt	lt
 8002fe6:	580b      	ldrlt	r3, [r1, r0]
 8002fe8:	18c0      	addlt	r0, r0, r3
 8002fea:	4770      	bx	lr

08002fec <__retarget_lock_acquire_recursive>:
 8002fec:	4770      	bx	lr

08002fee <__retarget_lock_release_recursive>:
 8002fee:	4770      	bx	lr

08002ff0 <_init>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr

08002ffc <_fini>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr
