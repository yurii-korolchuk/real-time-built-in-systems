
Lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  080028c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080028c0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069f7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b2  00000000  00000000  00026a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00028148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  000287f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e1f  00000000  00000000  00028e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000730d  00000000  00000000  0003ec2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e06b  00000000  00000000  00045f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d84  00000000  00000000  000c3ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080027c0 	.word	0x080027c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080027c0 	.word	0x080027c0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa01 	bl	8000558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f89d 	bl	8000298 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f871 	bl	8000244 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000162:	f000 f862 	bl	800022a <MX_NVIC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf ((char *) str, "%d", i);
 8000166:	4b0f      	ldr	r3, [pc, #60]	; (80001a4 <main+0x58>)
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	1d3b      	adds	r3, r7, #4
 800016c:	490e      	ldr	r1, [pc, #56]	; (80001a8 <main+0x5c>)
 800016e:	4618      	mov	r0, r3
 8000170:	f001 feec 	bl	8001f4c <siprintf>
	  HAL_UART_Transmit (&huart1, (uint8_t*)"\r\nHELLO WORLD ", sizeof ("\r\nHELLO WORLD "), 20);
 8000174:	2314      	movs	r3, #20
 8000176:	220f      	movs	r2, #15
 8000178:	490c      	ldr	r1, [pc, #48]	; (80001ac <main+0x60>)
 800017a:	480d      	ldr	r0, [pc, #52]	; (80001b0 <main+0x64>)
 800017c:	f001 fa29 	bl	80015d2 <HAL_UART_Transmit>
	  HAL_UART_Transmit (&huart1, str, sizeof (str), 1000);
 8000180:	1d39      	adds	r1, r7, #4
 8000182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000186:	2202      	movs	r2, #2
 8000188:	4809      	ldr	r0, [pc, #36]	; (80001b0 <main+0x64>)
 800018a:	f001 fa22 	bl	80015d2 <HAL_UART_Transmit>
	  i++;
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <main+0x58>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	3301      	adds	r3, #1
 8000194:	4a03      	ldr	r2, [pc, #12]	; (80001a4 <main+0x58>)
 8000196:	6013      	str	r3, [r2, #0]
	  HAL_Delay (400);
 8000198:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800019c:	f000 fa3e 	bl	800061c <HAL_Delay>
  {
 80001a0:	e7e1      	b.n	8000166 <main+0x1a>
 80001a2:	bf00      	nop
 80001a4:	2000008c 	.word	0x2000008c
 80001a8:	080027d8 	.word	0x080027d8
 80001ac:	080027dc 	.word	0x080027dc
 80001b0:	2000009c 	.word	0x2000009c

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 feba 	bl	8001f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e2:	2300      	movs	r3, #0
 80001e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fd8a 	bl	8000d04 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f6:	f000 f887 	bl	8000308 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fff6 	bl	8001204 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021e:	f000 f873 	bl	8000308 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	2100      	movs	r1, #0
 8000232:	2028      	movs	r0, #40	; 0x28
 8000234:	f000 faed 	bl	8000812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000238:	2028      	movs	r0, #40	; 0x28
 800023a:	f000 fb06 	bl	800084a <HAL_NVIC_EnableIRQ>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <MX_USART1_UART_Init+0x50>)
 800024c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 8000250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 800026a:	220c      	movs	r2, #12
 800026c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <MX_USART1_UART_Init+0x4c>)
 800027c:	f001 f95c 	bl	8001538 <HAL_UART_Init>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000286:	f000 f83f 	bl	8000308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	2000009c 	.word	0x2000009c
 8000294:	40013800 	.word	0x40013800

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_GPIO_Init+0x50>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <MX_GPIO_Init+0x50>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_GPIO_Init+0x50>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0304 	and.w	r3, r3, #4
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_GPIO_Init+0x54>)
 80002cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_GPIO_Init+0x58>)
 80002da:	f000 fb81 	bl	80009e0 <HAL_GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	10110000 	.word	0x10110000
 80002f0:	40010800 	.word	0x40010800

080002f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	80fb      	strh	r3, [r7, #6]

}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
}
 800030e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000310:	e7fe      	b.n	8000310 <Error_Handler+0x8>
	...

08000314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <HAL_MspInit+0x5c>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <HAL_MspInit+0x5c>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <HAL_MspInit+0x5c>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <HAL_MspInit+0x5c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <HAL_MspInit+0x5c>)
 8000338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033c:	61d3      	str	r3, [r2, #28]
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <HAL_MspInit+0x5c>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <HAL_MspInit+0x60>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <HAL_MspInit+0x60>)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000
 8000374:	40010000 	.word	0x40010000

08000378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a20      	ldr	r2, [pc, #128]	; (8000414 <HAL_UART_MspInit+0x9c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d139      	bne.n	800040c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <HAL_UART_MspInit+0xa0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <HAL_UART_MspInit+0xa0>)
 800039e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <HAL_UART_MspInit+0xa0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <HAL_UART_MspInit+0xa0>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a18      	ldr	r2, [pc, #96]	; (8000418 <HAL_UART_MspInit+0xa0>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <HAL_UART_MspInit+0xa0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ce:	2302      	movs	r3, #2
 80003d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d2:	2303      	movs	r3, #3
 80003d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	480f      	ldr	r0, [pc, #60]	; (800041c <HAL_UART_MspInit+0xa4>)
 80003de:	f000 faff 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <HAL_UART_MspInit+0xa4>)
 80003f8:	f000 faf2 	bl	80009e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2100      	movs	r1, #0
 8000400:	2025      	movs	r0, #37	; 0x25
 8000402:	f000 fa06 	bl	8000812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000406:	2025      	movs	r0, #37	; 0x25
 8000408:	f000 fa1f 	bl	800084a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40013800 	.word	0x40013800
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800

08000420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000424:	e7fe      	b.n	8000424 <NMI_Handler+0x4>

08000426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042a:	e7fe      	b.n	800042a <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	e7fe      	b.n	8000430 <MemManage_Handler+0x4>

08000432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000436:	e7fe      	b.n	8000436 <BusFault_Handler+0x4>

08000438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <UsageFault_Handler+0x4>

0800043e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000466:	f000 f8bd 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <USART1_IRQHandler+0x10>)
 8000476:	f001 f93f 	bl	80016f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2000009c 	.word	0x2000009c

08000484 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000488:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800048c:	f000 fc22 	bl	8000cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <_sbrk+0x5c>)
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <_sbrk+0x60>)
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d102      	bne.n	80004b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <_sbrk+0x64>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <_sbrk+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d207      	bcs.n	80004d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c4:	f001 fd10 	bl	8001ee8 <__errno>
 80004c8:	4603      	mov	r3, r0
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	e009      	b.n	80004e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <_sbrk+0x64>)
 80004e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20002800 	.word	0x20002800
 80004f4:	00000400 	.word	0x00000400
 80004f8:	20000090 	.word	0x20000090
 80004fc:	200000f8 	.word	0x200000f8

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000532:	f7ff ffe5 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f001 fcdd 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe07 	bl	800014c <main>
  bx lr
 800053e:	4770      	bx	lr
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000548:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 800054c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000550:	200000f4 	.word	0x200000f4

08000554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_2_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_Init+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_Init+0x28>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f947 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	200f      	movs	r0, #15
 8000570:	f000 f808 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f7ff fece 	bl	8000314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_InitTick+0x54>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_InitTick+0x58>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f95f 	bl	8000866 <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00e      	b.n	80005d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d80a      	bhi.n	80005ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f000 f927 	bl	8000812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_InitTick+0x5c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000004 	.word	0x20000004

080005e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_IncTick+0x1c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_IncTick+0x20>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x20>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000008 	.word	0x20000008
 8000604:	200000e0 	.word	0x200000e0

08000608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b02      	ldr	r3, [pc, #8]	; (8000618 <HAL_GetTick+0x10>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	200000e0 	.word	0x200000e0

0800061c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff0 	bl	8000608 <HAL_GetTick>
 8000628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d005      	beq.n	8000642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_Delay+0x44>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000642:	bf00      	nop
 8000644:	f7ff ffe0 	bl	8000608 <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	429a      	cmp	r2, r3
 8000652:	d8f7      	bhi.n	8000644 <HAL_Delay+0x28>
  {
  }
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000008 	.word	0x20000008

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4906      	ldr	r1, [pc, #24]	; (80006fc <__NVIC_EnableIRQ+0x34>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db0a      	blt.n	800072a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	490c      	ldr	r1, [pc, #48]	; (800074c <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000728:	e00a      	b.n	8000740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4908      	ldr	r1, [pc, #32]	; (8000750 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	0112      	lsls	r2, r2, #4
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	440b      	add	r3, r1
 800073e:	761a      	strb	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43da      	mvns	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c8:	d301      	bcc.n	80007ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00f      	b.n	80007ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <SysTick_Config+0x40>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d6:	210f      	movs	r1, #15
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f7ff ff90 	bl	8000700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SysTick_Config+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SysTick_Config+0x40>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000e010 	.word	0xe000e010

080007fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff2d 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff42 	bl	80006ac <__NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff90 	bl	8000754 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5f 	bl	8000700 <__NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff35 	bl	80006c8 <__NVIC_EnableIRQ>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffa2 	bl	80007b8 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000890:	2b02      	cmp	r3, #2
 8000892:	d008      	beq.n	80008a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2204      	movs	r2, #4
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e020      	b.n	80008e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f022 020e 	bic.w	r2, r2, #14
 80008b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0201 	bic.w	r2, r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000906:	2b02      	cmp	r3, #2
 8000908:	d005      	beq.n	8000916 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2204      	movs	r2, #4
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e051      	b.n	80009ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 020e 	bic.w	r2, r2, #14
 8000924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f022 0201 	bic.w	r2, r2, #1
 8000934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <HAL_DMA_Abort_IT+0xd0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d029      	beq.n	8000994 <HAL_DMA_Abort_IT+0xa0>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <HAL_DMA_Abort_IT+0xd4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d022      	beq.n	8000990 <HAL_DMA_Abort_IT+0x9c>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <HAL_DMA_Abort_IT+0xd8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d01a      	beq.n	800098a <HAL_DMA_Abort_IT+0x96>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <HAL_DMA_Abort_IT+0xdc>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d012      	beq.n	8000984 <HAL_DMA_Abort_IT+0x90>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <HAL_DMA_Abort_IT+0xe0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d00a      	beq.n	800097e <HAL_DMA_Abort_IT+0x8a>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <HAL_DMA_Abort_IT+0xe4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d102      	bne.n	8000978 <HAL_DMA_Abort_IT+0x84>
 8000972:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000976:	e00e      	b.n	8000996 <HAL_DMA_Abort_IT+0xa2>
 8000978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800097c:	e00b      	b.n	8000996 <HAL_DMA_Abort_IT+0xa2>
 800097e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000982:	e008      	b.n	8000996 <HAL_DMA_Abort_IT+0xa2>
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	e005      	b.n	8000996 <HAL_DMA_Abort_IT+0xa2>
 800098a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098e:	e002      	b.n	8000996 <HAL_DMA_Abort_IT+0xa2>
 8000990:	2310      	movs	r3, #16
 8000992:	e000      	b.n	8000996 <HAL_DMA_Abort_IT+0xa2>
 8000994:	2301      	movs	r3, #1
 8000996:	4a11      	ldr	r2, [pc, #68]	; (80009dc <HAL_DMA_Abort_IT+0xe8>)
 8000998:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
    } 
  }
  return status;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40020008 	.word	0x40020008
 80009c8:	4002001c 	.word	0x4002001c
 80009cc:	40020030 	.word	0x40020030
 80009d0:	40020044 	.word	0x40020044
 80009d4:	40020058 	.word	0x40020058
 80009d8:	4002006c 	.word	0x4002006c
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b08b      	sub	sp, #44	; 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e148      	b.n	8000c86 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f4:	2201      	movs	r2, #1
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	f040 8137 	bne.w	8000c80 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4aa3      	ldr	r2, [pc, #652]	; (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d05e      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a1c:	4aa1      	ldr	r2, [pc, #644]	; (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d875      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a22:	4aa1      	ldr	r2, [pc, #644]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d058      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a28:	4a9f      	ldr	r2, [pc, #636]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d86f      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a2e:	4a9f      	ldr	r2, [pc, #636]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d052      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a34:	4a9d      	ldr	r2, [pc, #628]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d869      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a3a:	4a9d      	ldr	r2, [pc, #628]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d04c      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a40:	4a9b      	ldr	r2, [pc, #620]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d863      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a46:	4a9b      	ldr	r2, [pc, #620]	; (8000cb4 <HAL_GPIO_Init+0x2d4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d046      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a4c:	4a99      	ldr	r2, [pc, #612]	; (8000cb4 <HAL_GPIO_Init+0x2d4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d85d      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d82a      	bhi.n	8000aac <HAL_GPIO_Init+0xcc>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d859      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <HAL_GPIO_Init+0x80>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000adb 	.word	0x08000adb
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000ac7 	.word	0x08000ac7
 8000a6c:	08000b09 	.word	0x08000b09
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000b0f 	.word	0x08000b0f
 8000a78:	08000b0f 	.word	0x08000b0f
 8000a7c:	08000b0f 	.word	0x08000b0f
 8000a80:	08000b0f 	.word	0x08000b0f
 8000a84:	08000b0f 	.word	0x08000b0f
 8000a88:	08000b0f 	.word	0x08000b0f
 8000a8c:	08000b0f 	.word	0x08000b0f
 8000a90:	08000b0f 	.word	0x08000b0f
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000b0f 	.word	0x08000b0f
 8000a9c:	08000b0f 	.word	0x08000b0f
 8000aa0:	08000b0f 	.word	0x08000b0f
 8000aa4:	08000abd 	.word	0x08000abd
 8000aa8:	08000ad1 	.word	0x08000ad1
 8000aac:	4a82      	ldr	r2, [pc, #520]	; (8000cb8 <HAL_GPIO_Init+0x2d8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab2:	e02c      	b.n	8000b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e029      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e024      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	3308      	adds	r3, #8
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e01f      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e01a      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e013      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	611a      	str	r2, [r3, #16]
          break;
 8000afa:	e009      	b.n	8000b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	615a      	str	r2, [r3, #20]
          break;
 8000b06:	e003      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          break;
 8000b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	; 0xff
 8000b14:	d801      	bhi.n	8000b1a <HAL_GPIO_Init+0x13a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	e001      	b.n	8000b1e <HAL_GPIO_Init+0x13e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2bff      	cmp	r3, #255	; 0xff
 8000b24:	d802      	bhi.n	8000b2c <HAL_GPIO_Init+0x14c>
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x152>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	210f      	movs	r1, #15
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	6a39      	ldr	r1, [r7, #32]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8090 	beq.w	8000c80 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b60:	4b56      	ldr	r3, [pc, #344]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a55      	ldr	r2, [pc, #340]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <HAL_GPIO_Init+0x2dc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b78:	4a51      	ldr	r2, [pc, #324]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a49      	ldr	r2, [pc, #292]	; (8000cc4 <HAL_GPIO_Init+0x2e4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00d      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e0>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a48      	ldr	r2, [pc, #288]	; (8000cc8 <HAL_GPIO_Init+0x2e8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x1dc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <HAL_GPIO_Init+0x2ec>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_GPIO_Init+0x1d8>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e004      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e002      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e000      	b.n	8000bc2 <HAL_GPIO_Init+0x1e2>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc4:	f002 0203 	and.w	r2, r2, #3
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	4093      	lsls	r3, r2
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bd2:	493b      	ldr	r1, [pc, #236]	; (8000cc0 <HAL_GPIO_Init+0x2e0>)
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4937      	ldr	r1, [pc, #220]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bfa:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4933      	ldr	r1, [pc, #204]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	492d      	ldr	r1, [pc, #180]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
 8000c20:	e006      	b.n	8000c30 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	4929      	ldr	r1, [pc, #164]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	4923      	ldr	r1, [pc, #140]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	491f      	ldr	r1, [pc, #124]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60cb      	str	r3, [r1, #12]
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	4915      	ldr	r1, [pc, #84]	; (8000cd0 <HAL_GPIO_Init+0x2f0>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	3301      	adds	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f aeaf 	bne.w	80009f4 <HAL_GPIO_Init+0x14>
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	372c      	adds	r7, #44	; 0x2c
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	10320000 	.word	0x10320000
 8000ca8:	10310000 	.word	0x10310000
 8000cac:	10220000 	.word	0x10220000
 8000cb0:	10210000 	.word	0x10210000
 8000cb4:	10120000 	.word	0x10120000
 8000cb8:	10110000 	.word	0x10110000
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fafe 	bl	80002f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010400 	.word	0x40010400

08000d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e26c      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8087 	beq.w	8000e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d24:	4b92      	ldr	r3, [pc, #584]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d00c      	beq.n	8000d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d30:	4b8f      	ldr	r3, [pc, #572]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d112      	bne.n	8000d62 <HAL_RCC_OscConfig+0x5e>
 8000d3c:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d48:	d10b      	bne.n	8000d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4a:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d06c      	beq.n	8000e30 <HAL_RCC_OscConfig+0x12c>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d168      	bne.n	8000e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e246      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6a:	d106      	bne.n	8000d7a <HAL_RCC_OscConfig+0x76>
 8000d6c:	4b80      	ldr	r3, [pc, #512]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a7f      	ldr	r2, [pc, #508]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e02e      	b.n	8000dd8 <HAL_RCC_OscConfig+0xd4>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10c      	bne.n	8000d9c <HAL_RCC_OscConfig+0x98>
 8000d82:	4b7b      	ldr	r3, [pc, #492]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a7a      	ldr	r2, [pc, #488]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a77      	ldr	r2, [pc, #476]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e01d      	b.n	8000dd8 <HAL_RCC_OscConfig+0xd4>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da4:	d10c      	bne.n	8000dc0 <HAL_RCC_OscConfig+0xbc>
 8000da6:	4b72      	ldr	r3, [pc, #456]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a71      	ldr	r2, [pc, #452]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	4b6f      	ldr	r3, [pc, #444]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e00b      	b.n	8000dd8 <HAL_RCC_OscConfig+0xd4>
 8000dc0:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a6a      	ldr	r2, [pc, #424]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a67      	ldr	r2, [pc, #412]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d013      	beq.n	8000e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc12 	bl	8000608 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de8:	f7ff fc0e 	bl	8000608 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b64      	cmp	r3, #100	; 0x64
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e1fa      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0xe4>
 8000e06:	e014      	b.n	8000e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fbfe 	bl	8000608 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e10:	f7ff fbfa 	bl	8000608 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b64      	cmp	r3, #100	; 0x64
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e1e6      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x10c>
 8000e2e:	e000      	b.n	8000e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d063      	beq.n	8000f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e3e:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00b      	beq.n	8000e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e4a:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	d11c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x18c>
 8000e56:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d116      	bne.n	8000e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e62:	4b43      	ldr	r3, [pc, #268]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d005      	beq.n	8000e7a <HAL_RCC_OscConfig+0x176>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d001      	beq.n	8000e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e1ba      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4939      	ldr	r1, [pc, #228]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	e03a      	b.n	8000f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d020      	beq.n	8000eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fbb3 	bl	8000608 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fbaf 	bl	8000608 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e19b      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4927      	ldr	r1, [pc, #156]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
 8000ed8:	e015      	b.n	8000f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_RCC_OscConfig+0x270>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fb92 	bl	8000608 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fb8e 	bl	8000608 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e17a      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d03a      	beq.n	8000f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d019      	beq.n	8000f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_RCC_OscConfig+0x274>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fb72 	bl	8000608 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fb6e 	bl	8000608 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e15a      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fad8 	bl	80014fc <RCC_Delay>
 8000f4c:	e01c      	b.n	8000f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_RCC_OscConfig+0x274>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f54:	f7ff fb58 	bl	8000608 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5a:	e00f      	b.n	8000f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fb54 	bl	8000608 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d908      	bls.n	8000f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e140      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	42420000 	.word	0x42420000
 8000f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7c:	4b9e      	ldr	r3, [pc, #632]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1e9      	bne.n	8000f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80a6 	beq.w	80010e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9a:	4b97      	ldr	r3, [pc, #604]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10d      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b94      	ldr	r3, [pc, #592]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a93      	ldr	r2, [pc, #588]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b91      	ldr	r3, [pc, #580]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	4b8e      	ldr	r3, [pc, #568]	; (80011fc <HAL_RCC_OscConfig+0x4f8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fce:	4b8b      	ldr	r3, [pc, #556]	; (80011fc <HAL_RCC_OscConfig+0x4f8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a8a      	ldr	r2, [pc, #552]	; (80011fc <HAL_RCC_OscConfig+0x4f8>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb15 	bl	8000608 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe2:	f7ff fb11 	bl	8000608 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e0fd      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	4b81      	ldr	r3, [pc, #516]	; (80011fc <HAL_RCC_OscConfig+0x4f8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x312>
 8001008:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a7a      	ldr	r2, [pc, #488]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	e02d      	b.n	8001072 <HAL_RCC_OscConfig+0x36e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x334>
 800101e:	4b76      	ldr	r3, [pc, #472]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a75      	ldr	r2, [pc, #468]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a72      	ldr	r2, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f023 0304 	bic.w	r3, r3, #4
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	e01c      	b.n	8001072 <HAL_RCC_OscConfig+0x36e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2b05      	cmp	r3, #5
 800103e:	d10c      	bne.n	800105a <HAL_RCC_OscConfig+0x356>
 8001040:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a6c      	ldr	r2, [pc, #432]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6213      	str	r3, [r2, #32]
 800104c:	4b6a      	ldr	r3, [pc, #424]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a69      	ldr	r2, [pc, #420]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6213      	str	r3, [r2, #32]
 8001058:	e00b      	b.n	8001072 <HAL_RCC_OscConfig+0x36e>
 800105a:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a66      	ldr	r2, [pc, #408]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a63      	ldr	r2, [pc, #396]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d015      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fac5 	bl	8000608 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f7ff fac1 	bl	8000608 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e0ab      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001098:	4b57      	ldr	r3, [pc, #348]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0ee      	beq.n	8001082 <HAL_RCC_OscConfig+0x37e>
 80010a4:	e014      	b.n	80010d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff faaf 	bl	8000608 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ac:	e00a      	b.n	80010c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff faab 	bl	8000608 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e095      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1ee      	bne.n	80010ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d105      	bne.n	80010e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d6:	4b48      	ldr	r3, [pc, #288]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8081 	beq.w	80011ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ec:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d061      	beq.n	80011bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d146      	bne.n	800118e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001100:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_RCC_OscConfig+0x4fc>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fa7f 	bl	8000608 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110e:	f7ff fa7b 	bl	8000608 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e067      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d108      	bne.n	8001148 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	492d      	ldr	r1, [pc, #180]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a19      	ldr	r1, [r3, #32]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	430b      	orrs	r3, r1
 800115a:	4927      	ldr	r1, [pc, #156]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_RCC_OscConfig+0x4fc>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fa4f 	bl	8000608 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff fa4b 	bl	8000608 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e037      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x46a>
 800118c:	e02f      	b.n	80011ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_RCC_OscConfig+0x4fc>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fa38 	bl	8000608 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff fa34 	bl	8000608 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e020      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x498>
 80011ba:	e018      	b.n	80011ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e013      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40007000 	.word	0x40007000
 8001200:	42420060 	.word	0x42420060

08001204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0d0      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d910      	bls.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 0207 	bic.w	r2, r3, #7
 800122e:	4965      	ldr	r1, [pc, #404]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0b8      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800126a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	494d      	ldr	r1, [pc, #308]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d040      	beq.n	8001324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d115      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07f      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e073      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e06b      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f023 0203 	bic.w	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4936      	ldr	r1, [pc, #216]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff f988 	bl	8000608 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff f984 	bl	8000608 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e053      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 020c 	and.w	r2, r3, #12
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	429a      	cmp	r2, r3
 8001322:	d1eb      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d210      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0207 	bic.w	r2, r3, #7
 800133a:	4922      	ldr	r1, [pc, #136]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e032      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4916      	ldr	r1, [pc, #88]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001392:	f000 f821 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 8001396:	4602      	mov	r2, r0
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	490a      	ldr	r1, [pc, #40]	; (80013cc <HAL_RCC_ClockConfig+0x1c8>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_RCC_ClockConfig+0x1cc>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_ClockConfig+0x1d0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8e6 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	080027fc 	.word	0x080027fc
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d8:	b490      	push	{r4, r7}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013e0:	1d3c      	adds	r4, r7, #4
 80013e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013e8:	f240 2301 	movw	r3, #513	; 0x201
 80013ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b04      	cmp	r3, #4
 8001410:	d002      	beq.n	8001418 <HAL_RCC_GetSysClockFreq+0x40>
 8001412:	2b08      	cmp	r3, #8
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x46>
 8001416:	e02d      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_RCC_GetSysClockFreq+0xb8>)
 800141a:	623b      	str	r3, [r7, #32]
      break;
 800141c:	e02d      	b.n	800147a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800142a:	4413      	add	r3, r2
 800142c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001430:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_RCC_GetSysClockFreq+0xb4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	0c5b      	lsrs	r3, r3, #17
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800144a:	4413      	add	r3, r2
 800144c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001450:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001456:	fb02 f203 	mul.w	r2, r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e004      	b.n	800146e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	623b      	str	r3, [r7, #32]
      break;
 8001472:	e002      	b.n	800147a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001476:	623b      	str	r3, [r7, #32]
      break;
 8001478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800147a:	6a3b      	ldr	r3, [r7, #32]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bc90      	pop	{r4, r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	080027ec 	.word	0x080027ec
 800148c:	40021000 	.word	0x40021000
 8001490:	007a1200 	.word	0x007a1200
 8001494:	003d0900 	.word	0x003d0900

08001498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000

080014ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014b0:	f7ff fff2 	bl	8001498 <HAL_RCC_GetHCLKFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	4903      	ldr	r1, [pc, #12]	; (80014d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	0800280c 	.word	0x0800280c

080014d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d8:	f7ff ffde 	bl	8001498 <HAL_RCC_GetHCLKFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	0adb      	lsrs	r3, r3, #11
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	4903      	ldr	r1, [pc, #12]	; (80014f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000
 80014f8:	0800280c 	.word	0x0800280c

080014fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <RCC_Delay+0x34>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <RCC_Delay+0x38>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0a5b      	lsrs	r3, r3, #9
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001518:	bf00      	nop
  }
  while (Delay --);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	60fa      	str	r2, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f9      	bne.n	8001518 <RCC_Delay+0x1c>
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000000 	.word	0x20000000
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e03f      	b.n	80015ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7fe ff0a 	bl	8000378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800157a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fc25 	bl	8001dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b08a      	sub	sp, #40	; 0x28
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4613      	mov	r3, r2
 80015e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d17c      	bne.n	80016ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_UART_Transmit+0x2c>
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e075      	b.n	80016ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_UART_Transmit+0x3e>
 800160c:	2302      	movs	r3, #2
 800160e:	e06e      	b.n	80016ee <HAL_UART_Transmit+0x11c>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2221      	movs	r2, #33	; 0x21
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001626:	f7fe ffef 	bl	8000608 <HAL_GetTick>
 800162a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001640:	d108      	bne.n	8001654 <HAL_UART_Transmit+0x82>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d104      	bne.n	8001654 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	e003      	b.n	800165c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001664:	e02a      	b.n	80016bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2200      	movs	r2, #0
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 fa11 	bl	8001a98 <UART_WaitOnFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e036      	b.n	80016ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	3302      	adds	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	e007      	b.n	80016ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	3301      	adds	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1cf      	bne.n	8001666 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f9e1 	bl	8001a98 <UART_WaitOnFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e006      	b.n	80016ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2220      	movs	r2, #32
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e000      	b.n	80016ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016ec:	2302      	movs	r3, #2
  }
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10d      	bne.n	800174a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_UART_IRQHandler+0x52>
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa99 	bl	8001c7a <UART_Receive_IT>
      return;
 8001748:	e17b      	b.n	8001a42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80b1 	beq.w	80018b4 <HAL_UART_IRQHandler+0x1bc>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_UART_IRQHandler+0x70>
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a6 	beq.w	80018b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_UART_IRQHandler+0x90>
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00a      	beq.n	80017a8 <HAL_UART_IRQHandler+0xb0>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00a      	beq.n	80017c8 <HAL_UART_IRQHandler+0xd0>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f043 0204 	orr.w	r2, r3, #4
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00f      	beq.n	80017f2 <HAL_UART_IRQHandler+0xfa>
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d104      	bne.n	80017e6 <HAL_UART_IRQHandler+0xee>
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f043 0208 	orr.w	r2, r3, #8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 811e 	beq.w	8001a38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_UART_IRQHandler+0x11e>
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fa32 	bl	8001c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <HAL_UART_IRQHandler+0x146>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d031      	beq.n	80018a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f974 	bl	8001b2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d023      	beq.n	800189a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001860:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	2b00      	cmp	r3, #0
 8001868:	d013      	beq.n	8001892 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	4a76      	ldr	r2, [pc, #472]	; (8001a48 <HAL_UART_IRQHandler+0x350>)
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f83c 	bl	80008f4 <HAL_DMA_Abort_IT>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800188c:	4610      	mov	r0, r2
 800188e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001890:	e00e      	b.n	80018b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8ec 	bl	8001a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001898:	e00a      	b.n	80018b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8e8 	bl	8001a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018a0:	e006      	b.n	80018b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8e4 	bl	8001a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80018ae:	e0c3      	b.n	8001a38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018b0:	bf00      	nop
    return;
 80018b2:	e0c1      	b.n	8001a38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	f040 80a1 	bne.w	8001a00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 809b 	beq.w	8001a00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8095 	beq.w	8001a00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d04e      	beq.n	8001998 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001904:	8a3b      	ldrh	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8098 	beq.w	8001a3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001910:	8a3a      	ldrh	r2, [r7, #16]
 8001912:	429a      	cmp	r2, r3
 8001914:	f080 8092 	bcs.w	8001a3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8a3a      	ldrh	r2, [r7, #16]
 800191c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b20      	cmp	r3, #32
 8001926:	d02b      	beq.n	8001980 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001936:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001956:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0210 	bic.w	r2, r2, #16
 8001974:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe ff7f 	bl	800087e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001988:	b29b      	uxth	r3, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b29b      	uxth	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f876 	bl	8001a82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001996:	e051      	b.n	8001a3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d047      	beq.n	8001a40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80019b0:	8a7b      	ldrh	r3, [r7, #18]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0210 	bic.w	r2, r2, #16
 80019f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80019f4:	8a7b      	ldrh	r3, [r7, #18]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f842 	bl	8001a82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80019fe:	e01f      	b.n	8001a40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_UART_IRQHandler+0x324>
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8c9 	bl	8001bac <UART_Transmit_IT>
    return;
 8001a1a:	e012      	b.n	8001a42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <HAL_UART_IRQHandler+0x34a>
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f90a 	bl	8001c4a <UART_EndTransmit_IT>
    return;
 8001a36:	e004      	b.n	8001a42 <HAL_UART_IRQHandler+0x34a>
    return;
 8001a38:	bf00      	nop
 8001a3a:	e002      	b.n	8001a42 <HAL_UART_IRQHandler+0x34a>
      return;
 8001a3c:	bf00      	nop
 8001a3e:	e000      	b.n	8001a42 <HAL_UART_IRQHandler+0x34a>
      return;
 8001a40:	bf00      	nop
  }
}
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	08001b85 	.word	0x08001b85

08001a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa8:	e02c      	b.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d028      	beq.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ab8:	f7fe fda6 	bl	8000608 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d21d      	bcs.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ad6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e00f      	b.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d0c3      	beq.n	8001aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff ff66 	bl	8001a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b21      	cmp	r3, #33	; 0x21
 8001bbe:	d13e      	bne.n	8001c3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc8:	d114      	bne.n	8001bf4 <UART_Transmit_IT+0x48>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d110      	bne.n	8001bf4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001be6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	1c9a      	adds	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	621a      	str	r2, [r3, #32]
 8001bf2:	e008      	b.n	8001c06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	1c59      	adds	r1, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6211      	str	r1, [r2, #32]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4619      	mov	r1, r3
 8001c14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff feee 	bl	8001a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b22      	cmp	r3, #34	; 0x22
 8001c8c:	f040 8099 	bne.w	8001dc2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c98:	d117      	bne.n	8001cca <UART_Receive_IT+0x50>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	1c9a      	adds	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8001cc8:	e026      	b.n	8001d18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cdc:	d007      	beq.n	8001cee <UART_Receive_IT+0x74>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <UART_Receive_IT+0x82>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e008      	b.n	8001d0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4619      	mov	r1, r3
 8001d26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d148      	bne.n	8001dbe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0220 	bic.w	r2, r2, #32
 8001d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d123      	bne.n	8001db4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0210 	bic.w	r2, r2, #16
 8001d80:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d10a      	bne.n	8001da6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fe68 	bl	8001a82 <HAL_UARTEx_RxEventCallback>
 8001db2:	e002      	b.n	8001dba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fe52 	bl	8001a5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e002      	b.n	8001dc4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e06:	f023 030c 	bic.w	r3, r3, #12
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <UART_SetConfig+0x114>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d103      	bne.n	8001e3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e34:	f7ff fb4e 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	e002      	b.n	8001e42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e3c:	f7ff fb36 	bl	80014ac <HAL_RCC_GetPCLK1Freq>
 8001e40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009a      	lsls	r2, r3, #2
 8001e4c:	441a      	add	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <UART_SetConfig+0x118>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	0119      	lsls	r1, r3, #4
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009a      	lsls	r2, r3, #2
 8001e6c:	441a      	add	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <UART_SetConfig+0x118>)
 8001e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2064      	movs	r0, #100	; 0x64
 8001e82:	fb00 f303 	mul.w	r3, r0, r3
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	3332      	adds	r3, #50	; 0x32
 8001e8c:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <UART_SetConfig+0x118>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e98:	4419      	add	r1, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009a      	lsls	r2, r3, #2
 8001ea4:	441a      	add	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <UART_SetConfig+0x118>)
 8001eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2064      	movs	r0, #100	; 0x64
 8001eba:	fb00 f303 	mul.w	r3, r0, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	3332      	adds	r3, #50	; 0x32
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <UART_SetConfig+0x118>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	f003 020f 	and.w	r2, r3, #15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	51eb851f 	.word	0x51eb851f

08001ee8 <__errno>:
 8001ee8:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <__errno+0x8>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	2000000c 	.word	0x2000000c

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	4d0c      	ldr	r5, [pc, #48]	; (8001f2c <__libc_init_array+0x38>)
 8001efa:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efc:	1b64      	subs	r4, r4, r5
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	f000 fc5c 	bl	80027c0 <_init>
 8001f08:	2600      	movs	r6, #0
 8001f0a:	4d0a      	ldr	r5, [pc, #40]	; (8001f34 <__libc_init_array+0x40>)
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <__libc_init_array+0x44>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08002848 	.word	0x08002848
 8001f30:	08002848 	.word	0x08002848
 8001f34:	08002848 	.word	0x08002848
 8001f38:	0800284c 	.word	0x0800284c

08001f3c <memset>:
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4402      	add	r2, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <siprintf>:
 8001f4c:	b40e      	push	{r1, r2, r3}
 8001f4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f52:	b500      	push	{lr}
 8001f54:	b09c      	sub	sp, #112	; 0x70
 8001f56:	ab1d      	add	r3, sp, #116	; 0x74
 8001f58:	9002      	str	r0, [sp, #8]
 8001f5a:	9006      	str	r0, [sp, #24]
 8001f5c:	9107      	str	r1, [sp, #28]
 8001f5e:	9104      	str	r1, [sp, #16]
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <siprintf+0x38>)
 8001f62:	4909      	ldr	r1, [pc, #36]	; (8001f88 <siprintf+0x3c>)
 8001f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f68:	9105      	str	r1, [sp, #20]
 8001f6a:	6800      	ldr	r0, [r0, #0]
 8001f6c:	a902      	add	r1, sp, #8
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	f000 f868 	bl	8002044 <_svfiprintf_r>
 8001f74:	2200      	movs	r2, #0
 8001f76:	9b02      	ldr	r3, [sp, #8]
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	b01c      	add	sp, #112	; 0x70
 8001f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f80:	b003      	add	sp, #12
 8001f82:	4770      	bx	lr
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	ffff0208 	.word	0xffff0208

08001f8c <__ssputs_r>:
 8001f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f90:	688e      	ldr	r6, [r1, #8]
 8001f92:	4682      	mov	sl, r0
 8001f94:	429e      	cmp	r6, r3
 8001f96:	460c      	mov	r4, r1
 8001f98:	4690      	mov	r8, r2
 8001f9a:	461f      	mov	r7, r3
 8001f9c:	d838      	bhi.n	8002010 <__ssputs_r+0x84>
 8001f9e:	898a      	ldrh	r2, [r1, #12]
 8001fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fa4:	d032      	beq.n	800200c <__ssputs_r+0x80>
 8001fa6:	6825      	ldr	r5, [r4, #0]
 8001fa8:	6909      	ldr	r1, [r1, #16]
 8001faa:	3301      	adds	r3, #1
 8001fac:	eba5 0901 	sub.w	r9, r5, r1
 8001fb0:	6965      	ldr	r5, [r4, #20]
 8001fb2:	444b      	add	r3, r9
 8001fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fbc:	106d      	asrs	r5, r5, #1
 8001fbe:	429d      	cmp	r5, r3
 8001fc0:	bf38      	it	cc
 8001fc2:	461d      	movcc	r5, r3
 8001fc4:	0553      	lsls	r3, r2, #21
 8001fc6:	d531      	bpl.n	800202c <__ssputs_r+0xa0>
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f000 fb53 	bl	8002674 <_malloc_r>
 8001fce:	4606      	mov	r6, r0
 8001fd0:	b950      	cbnz	r0, 8001fe8 <__ssputs_r+0x5c>
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f8ca 3000 	str.w	r3, [sl]
 8001fdc:	89a3      	ldrh	r3, [r4, #12]
 8001fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe2:	81a3      	strh	r3, [r4, #12]
 8001fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe8:	464a      	mov	r2, r9
 8001fea:	6921      	ldr	r1, [r4, #16]
 8001fec:	f000 face 	bl	800258c <memcpy>
 8001ff0:	89a3      	ldrh	r3, [r4, #12]
 8001ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffa:	81a3      	strh	r3, [r4, #12]
 8001ffc:	6126      	str	r6, [r4, #16]
 8001ffe:	444e      	add	r6, r9
 8002000:	6026      	str	r6, [r4, #0]
 8002002:	463e      	mov	r6, r7
 8002004:	6165      	str	r5, [r4, #20]
 8002006:	eba5 0509 	sub.w	r5, r5, r9
 800200a:	60a5      	str	r5, [r4, #8]
 800200c:	42be      	cmp	r6, r7
 800200e:	d900      	bls.n	8002012 <__ssputs_r+0x86>
 8002010:	463e      	mov	r6, r7
 8002012:	4632      	mov	r2, r6
 8002014:	4641      	mov	r1, r8
 8002016:	6820      	ldr	r0, [r4, #0]
 8002018:	f000 fac6 	bl	80025a8 <memmove>
 800201c:	68a3      	ldr	r3, [r4, #8]
 800201e:	6822      	ldr	r2, [r4, #0]
 8002020:	1b9b      	subs	r3, r3, r6
 8002022:	4432      	add	r2, r6
 8002024:	2000      	movs	r0, #0
 8002026:	60a3      	str	r3, [r4, #8]
 8002028:	6022      	str	r2, [r4, #0]
 800202a:	e7db      	b.n	8001fe4 <__ssputs_r+0x58>
 800202c:	462a      	mov	r2, r5
 800202e:	f000 fb7b 	bl	8002728 <_realloc_r>
 8002032:	4606      	mov	r6, r0
 8002034:	2800      	cmp	r0, #0
 8002036:	d1e1      	bne.n	8001ffc <__ssputs_r+0x70>
 8002038:	4650      	mov	r0, sl
 800203a:	6921      	ldr	r1, [r4, #16]
 800203c:	f000 face 	bl	80025dc <_free_r>
 8002040:	e7c7      	b.n	8001fd2 <__ssputs_r+0x46>
	...

08002044 <_svfiprintf_r>:
 8002044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002048:	4698      	mov	r8, r3
 800204a:	898b      	ldrh	r3, [r1, #12]
 800204c:	4607      	mov	r7, r0
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	460d      	mov	r5, r1
 8002052:	4614      	mov	r4, r2
 8002054:	b09d      	sub	sp, #116	; 0x74
 8002056:	d50e      	bpl.n	8002076 <_svfiprintf_r+0x32>
 8002058:	690b      	ldr	r3, [r1, #16]
 800205a:	b963      	cbnz	r3, 8002076 <_svfiprintf_r+0x32>
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	f000 fb09 	bl	8002674 <_malloc_r>
 8002062:	6028      	str	r0, [r5, #0]
 8002064:	6128      	str	r0, [r5, #16]
 8002066:	b920      	cbnz	r0, 8002072 <_svfiprintf_r+0x2e>
 8002068:	230c      	movs	r3, #12
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	e0d1      	b.n	8002216 <_svfiprintf_r+0x1d2>
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	616b      	str	r3, [r5, #20]
 8002076:	2300      	movs	r3, #0
 8002078:	9309      	str	r3, [sp, #36]	; 0x24
 800207a:	2320      	movs	r3, #32
 800207c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002080:	2330      	movs	r3, #48	; 0x30
 8002082:	f04f 0901 	mov.w	r9, #1
 8002086:	f8cd 800c 	str.w	r8, [sp, #12]
 800208a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002230 <_svfiprintf_r+0x1ec>
 800208e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002092:	4623      	mov	r3, r4
 8002094:	469a      	mov	sl, r3
 8002096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800209a:	b10a      	cbz	r2, 80020a0 <_svfiprintf_r+0x5c>
 800209c:	2a25      	cmp	r2, #37	; 0x25
 800209e:	d1f9      	bne.n	8002094 <_svfiprintf_r+0x50>
 80020a0:	ebba 0b04 	subs.w	fp, sl, r4
 80020a4:	d00b      	beq.n	80020be <_svfiprintf_r+0x7a>
 80020a6:	465b      	mov	r3, fp
 80020a8:	4622      	mov	r2, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	4638      	mov	r0, r7
 80020ae:	f7ff ff6d 	bl	8001f8c <__ssputs_r>
 80020b2:	3001      	adds	r0, #1
 80020b4:	f000 80aa 	beq.w	800220c <_svfiprintf_r+0x1c8>
 80020b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020ba:	445a      	add	r2, fp
 80020bc:	9209      	str	r2, [sp, #36]	; 0x24
 80020be:	f89a 3000 	ldrb.w	r3, [sl]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80a2 	beq.w	800220c <_svfiprintf_r+0x1c8>
 80020c8:	2300      	movs	r3, #0
 80020ca:	f04f 32ff 	mov.w	r2, #4294967295
 80020ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020d2:	f10a 0a01 	add.w	sl, sl, #1
 80020d6:	9304      	str	r3, [sp, #16]
 80020d8:	9307      	str	r3, [sp, #28]
 80020da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020de:	931a      	str	r3, [sp, #104]	; 0x68
 80020e0:	4654      	mov	r4, sl
 80020e2:	2205      	movs	r2, #5
 80020e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020e8:	4851      	ldr	r0, [pc, #324]	; (8002230 <_svfiprintf_r+0x1ec>)
 80020ea:	f000 fa41 	bl	8002570 <memchr>
 80020ee:	9a04      	ldr	r2, [sp, #16]
 80020f0:	b9d8      	cbnz	r0, 800212a <_svfiprintf_r+0xe6>
 80020f2:	06d0      	lsls	r0, r2, #27
 80020f4:	bf44      	itt	mi
 80020f6:	2320      	movmi	r3, #32
 80020f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020fc:	0711      	lsls	r1, r2, #28
 80020fe:	bf44      	itt	mi
 8002100:	232b      	movmi	r3, #43	; 0x2b
 8002102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002106:	f89a 3000 	ldrb.w	r3, [sl]
 800210a:	2b2a      	cmp	r3, #42	; 0x2a
 800210c:	d015      	beq.n	800213a <_svfiprintf_r+0xf6>
 800210e:	4654      	mov	r4, sl
 8002110:	2000      	movs	r0, #0
 8002112:	f04f 0c0a 	mov.w	ip, #10
 8002116:	9a07      	ldr	r2, [sp, #28]
 8002118:	4621      	mov	r1, r4
 800211a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800211e:	3b30      	subs	r3, #48	; 0x30
 8002120:	2b09      	cmp	r3, #9
 8002122:	d94e      	bls.n	80021c2 <_svfiprintf_r+0x17e>
 8002124:	b1b0      	cbz	r0, 8002154 <_svfiprintf_r+0x110>
 8002126:	9207      	str	r2, [sp, #28]
 8002128:	e014      	b.n	8002154 <_svfiprintf_r+0x110>
 800212a:	eba0 0308 	sub.w	r3, r0, r8
 800212e:	fa09 f303 	lsl.w	r3, r9, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	46a2      	mov	sl, r4
 8002136:	9304      	str	r3, [sp, #16]
 8002138:	e7d2      	b.n	80020e0 <_svfiprintf_r+0x9c>
 800213a:	9b03      	ldr	r3, [sp, #12]
 800213c:	1d19      	adds	r1, r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	9103      	str	r1, [sp, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	bfbb      	ittet	lt
 8002146:	425b      	neglt	r3, r3
 8002148:	f042 0202 	orrlt.w	r2, r2, #2
 800214c:	9307      	strge	r3, [sp, #28]
 800214e:	9307      	strlt	r3, [sp, #28]
 8002150:	bfb8      	it	lt
 8002152:	9204      	strlt	r2, [sp, #16]
 8002154:	7823      	ldrb	r3, [r4, #0]
 8002156:	2b2e      	cmp	r3, #46	; 0x2e
 8002158:	d10c      	bne.n	8002174 <_svfiprintf_r+0x130>
 800215a:	7863      	ldrb	r3, [r4, #1]
 800215c:	2b2a      	cmp	r3, #42	; 0x2a
 800215e:	d135      	bne.n	80021cc <_svfiprintf_r+0x188>
 8002160:	9b03      	ldr	r3, [sp, #12]
 8002162:	3402      	adds	r4, #2
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	9203      	str	r2, [sp, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	bfb8      	it	lt
 800216e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002172:	9305      	str	r3, [sp, #20]
 8002174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002240 <_svfiprintf_r+0x1fc>
 8002178:	2203      	movs	r2, #3
 800217a:	4650      	mov	r0, sl
 800217c:	7821      	ldrb	r1, [r4, #0]
 800217e:	f000 f9f7 	bl	8002570 <memchr>
 8002182:	b140      	cbz	r0, 8002196 <_svfiprintf_r+0x152>
 8002184:	2340      	movs	r3, #64	; 0x40
 8002186:	eba0 000a 	sub.w	r0, r0, sl
 800218a:	fa03 f000 	lsl.w	r0, r3, r0
 800218e:	9b04      	ldr	r3, [sp, #16]
 8002190:	3401      	adds	r4, #1
 8002192:	4303      	orrs	r3, r0
 8002194:	9304      	str	r3, [sp, #16]
 8002196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800219a:	2206      	movs	r2, #6
 800219c:	4825      	ldr	r0, [pc, #148]	; (8002234 <_svfiprintf_r+0x1f0>)
 800219e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021a2:	f000 f9e5 	bl	8002570 <memchr>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d038      	beq.n	800221c <_svfiprintf_r+0x1d8>
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <_svfiprintf_r+0x1f4>)
 80021ac:	bb1b      	cbnz	r3, 80021f6 <_svfiprintf_r+0x1b2>
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	3307      	adds	r3, #7
 80021b2:	f023 0307 	bic.w	r3, r3, #7
 80021b6:	3308      	adds	r3, #8
 80021b8:	9303      	str	r3, [sp, #12]
 80021ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021bc:	4433      	add	r3, r6
 80021be:	9309      	str	r3, [sp, #36]	; 0x24
 80021c0:	e767      	b.n	8002092 <_svfiprintf_r+0x4e>
 80021c2:	460c      	mov	r4, r1
 80021c4:	2001      	movs	r0, #1
 80021c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80021ca:	e7a5      	b.n	8002118 <_svfiprintf_r+0xd4>
 80021cc:	2300      	movs	r3, #0
 80021ce:	f04f 0c0a 	mov.w	ip, #10
 80021d2:	4619      	mov	r1, r3
 80021d4:	3401      	adds	r4, #1
 80021d6:	9305      	str	r3, [sp, #20]
 80021d8:	4620      	mov	r0, r4
 80021da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021de:	3a30      	subs	r2, #48	; 0x30
 80021e0:	2a09      	cmp	r2, #9
 80021e2:	d903      	bls.n	80021ec <_svfiprintf_r+0x1a8>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0c5      	beq.n	8002174 <_svfiprintf_r+0x130>
 80021e8:	9105      	str	r1, [sp, #20]
 80021ea:	e7c3      	b.n	8002174 <_svfiprintf_r+0x130>
 80021ec:	4604      	mov	r4, r0
 80021ee:	2301      	movs	r3, #1
 80021f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80021f4:	e7f0      	b.n	80021d8 <_svfiprintf_r+0x194>
 80021f6:	ab03      	add	r3, sp, #12
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	462a      	mov	r2, r5
 80021fc:	4638      	mov	r0, r7
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <_svfiprintf_r+0x1f8>)
 8002200:	a904      	add	r1, sp, #16
 8002202:	f3af 8000 	nop.w
 8002206:	1c42      	adds	r2, r0, #1
 8002208:	4606      	mov	r6, r0
 800220a:	d1d6      	bne.n	80021ba <_svfiprintf_r+0x176>
 800220c:	89ab      	ldrh	r3, [r5, #12]
 800220e:	065b      	lsls	r3, r3, #25
 8002210:	f53f af2c 	bmi.w	800206c <_svfiprintf_r+0x28>
 8002214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002216:	b01d      	add	sp, #116	; 0x74
 8002218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800221c:	ab03      	add	r3, sp, #12
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	462a      	mov	r2, r5
 8002222:	4638      	mov	r0, r7
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <_svfiprintf_r+0x1f8>)
 8002226:	a904      	add	r1, sp, #16
 8002228:	f000 f87c 	bl	8002324 <_printf_i>
 800222c:	e7eb      	b.n	8002206 <_svfiprintf_r+0x1c2>
 800222e:	bf00      	nop
 8002230:	08002814 	.word	0x08002814
 8002234:	0800281e 	.word	0x0800281e
 8002238:	00000000 	.word	0x00000000
 800223c:	08001f8d 	.word	0x08001f8d
 8002240:	0800281a 	.word	0x0800281a

08002244 <_printf_common>:
 8002244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002248:	4616      	mov	r6, r2
 800224a:	4699      	mov	r9, r3
 800224c:	688a      	ldr	r2, [r1, #8]
 800224e:	690b      	ldr	r3, [r1, #16]
 8002250:	4607      	mov	r7, r0
 8002252:	4293      	cmp	r3, r2
 8002254:	bfb8      	it	lt
 8002256:	4613      	movlt	r3, r2
 8002258:	6033      	str	r3, [r6, #0]
 800225a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800225e:	460c      	mov	r4, r1
 8002260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002264:	b10a      	cbz	r2, 800226a <_printf_common+0x26>
 8002266:	3301      	adds	r3, #1
 8002268:	6033      	str	r3, [r6, #0]
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	0699      	lsls	r1, r3, #26
 800226e:	bf42      	ittt	mi
 8002270:	6833      	ldrmi	r3, [r6, #0]
 8002272:	3302      	addmi	r3, #2
 8002274:	6033      	strmi	r3, [r6, #0]
 8002276:	6825      	ldr	r5, [r4, #0]
 8002278:	f015 0506 	ands.w	r5, r5, #6
 800227c:	d106      	bne.n	800228c <_printf_common+0x48>
 800227e:	f104 0a19 	add.w	sl, r4, #25
 8002282:	68e3      	ldr	r3, [r4, #12]
 8002284:	6832      	ldr	r2, [r6, #0]
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	42ab      	cmp	r3, r5
 800228a:	dc28      	bgt.n	80022de <_printf_common+0x9a>
 800228c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002290:	1e13      	subs	r3, r2, #0
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	bf18      	it	ne
 8002296:	2301      	movne	r3, #1
 8002298:	0692      	lsls	r2, r2, #26
 800229a:	d42d      	bmi.n	80022f8 <_printf_common+0xb4>
 800229c:	4649      	mov	r1, r9
 800229e:	4638      	mov	r0, r7
 80022a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022a4:	47c0      	blx	r8
 80022a6:	3001      	adds	r0, #1
 80022a8:	d020      	beq.n	80022ec <_printf_common+0xa8>
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	68e5      	ldr	r5, [r4, #12]
 80022ae:	f003 0306 	and.w	r3, r3, #6
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf18      	it	ne
 80022b6:	2500      	movne	r5, #0
 80022b8:	6832      	ldr	r2, [r6, #0]
 80022ba:	f04f 0600 	mov.w	r6, #0
 80022be:	68a3      	ldr	r3, [r4, #8]
 80022c0:	bf08      	it	eq
 80022c2:	1aad      	subeq	r5, r5, r2
 80022c4:	6922      	ldr	r2, [r4, #16]
 80022c6:	bf08      	it	eq
 80022c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022cc:	4293      	cmp	r3, r2
 80022ce:	bfc4      	itt	gt
 80022d0:	1a9b      	subgt	r3, r3, r2
 80022d2:	18ed      	addgt	r5, r5, r3
 80022d4:	341a      	adds	r4, #26
 80022d6:	42b5      	cmp	r5, r6
 80022d8:	d11a      	bne.n	8002310 <_printf_common+0xcc>
 80022da:	2000      	movs	r0, #0
 80022dc:	e008      	b.n	80022f0 <_printf_common+0xac>
 80022de:	2301      	movs	r3, #1
 80022e0:	4652      	mov	r2, sl
 80022e2:	4649      	mov	r1, r9
 80022e4:	4638      	mov	r0, r7
 80022e6:	47c0      	blx	r8
 80022e8:	3001      	adds	r0, #1
 80022ea:	d103      	bne.n	80022f4 <_printf_common+0xb0>
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f4:	3501      	adds	r5, #1
 80022f6:	e7c4      	b.n	8002282 <_printf_common+0x3e>
 80022f8:	2030      	movs	r0, #48	; 0x30
 80022fa:	18e1      	adds	r1, r4, r3
 80022fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002306:	4422      	add	r2, r4
 8002308:	3302      	adds	r3, #2
 800230a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800230e:	e7c5      	b.n	800229c <_printf_common+0x58>
 8002310:	2301      	movs	r3, #1
 8002312:	4622      	mov	r2, r4
 8002314:	4649      	mov	r1, r9
 8002316:	4638      	mov	r0, r7
 8002318:	47c0      	blx	r8
 800231a:	3001      	adds	r0, #1
 800231c:	d0e6      	beq.n	80022ec <_printf_common+0xa8>
 800231e:	3601      	adds	r6, #1
 8002320:	e7d9      	b.n	80022d6 <_printf_common+0x92>
	...

08002324 <_printf_i>:
 8002324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002328:	460c      	mov	r4, r1
 800232a:	7e27      	ldrb	r7, [r4, #24]
 800232c:	4691      	mov	r9, r2
 800232e:	2f78      	cmp	r7, #120	; 0x78
 8002330:	4680      	mov	r8, r0
 8002332:	469a      	mov	sl, r3
 8002334:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800233a:	d807      	bhi.n	800234c <_printf_i+0x28>
 800233c:	2f62      	cmp	r7, #98	; 0x62
 800233e:	d80a      	bhi.n	8002356 <_printf_i+0x32>
 8002340:	2f00      	cmp	r7, #0
 8002342:	f000 80d9 	beq.w	80024f8 <_printf_i+0x1d4>
 8002346:	2f58      	cmp	r7, #88	; 0x58
 8002348:	f000 80a4 	beq.w	8002494 <_printf_i+0x170>
 800234c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002354:	e03a      	b.n	80023cc <_printf_i+0xa8>
 8002356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800235a:	2b15      	cmp	r3, #21
 800235c:	d8f6      	bhi.n	800234c <_printf_i+0x28>
 800235e:	a001      	add	r0, pc, #4	; (adr r0, 8002364 <_printf_i+0x40>)
 8002360:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002364:	080023bd 	.word	0x080023bd
 8002368:	080023d1 	.word	0x080023d1
 800236c:	0800234d 	.word	0x0800234d
 8002370:	0800234d 	.word	0x0800234d
 8002374:	0800234d 	.word	0x0800234d
 8002378:	0800234d 	.word	0x0800234d
 800237c:	080023d1 	.word	0x080023d1
 8002380:	0800234d 	.word	0x0800234d
 8002384:	0800234d 	.word	0x0800234d
 8002388:	0800234d 	.word	0x0800234d
 800238c:	0800234d 	.word	0x0800234d
 8002390:	080024df 	.word	0x080024df
 8002394:	08002401 	.word	0x08002401
 8002398:	080024c1 	.word	0x080024c1
 800239c:	0800234d 	.word	0x0800234d
 80023a0:	0800234d 	.word	0x0800234d
 80023a4:	08002501 	.word	0x08002501
 80023a8:	0800234d 	.word	0x0800234d
 80023ac:	08002401 	.word	0x08002401
 80023b0:	0800234d 	.word	0x0800234d
 80023b4:	0800234d 	.word	0x0800234d
 80023b8:	080024c9 	.word	0x080024c9
 80023bc:	680b      	ldr	r3, [r1, #0]
 80023be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	600a      	str	r2, [r1, #0]
 80023c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0a4      	b.n	800251a <_printf_i+0x1f6>
 80023d0:	6825      	ldr	r5, [r4, #0]
 80023d2:	6808      	ldr	r0, [r1, #0]
 80023d4:	062e      	lsls	r6, r5, #24
 80023d6:	f100 0304 	add.w	r3, r0, #4
 80023da:	d50a      	bpl.n	80023f2 <_printf_i+0xce>
 80023dc:	6805      	ldr	r5, [r0, #0]
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	da03      	bge.n	80023ec <_printf_i+0xc8>
 80023e4:	232d      	movs	r3, #45	; 0x2d
 80023e6:	426d      	negs	r5, r5
 80023e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ec:	230a      	movs	r3, #10
 80023ee:	485e      	ldr	r0, [pc, #376]	; (8002568 <_printf_i+0x244>)
 80023f0:	e019      	b.n	8002426 <_printf_i+0x102>
 80023f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023f6:	6805      	ldr	r5, [r0, #0]
 80023f8:	600b      	str	r3, [r1, #0]
 80023fa:	bf18      	it	ne
 80023fc:	b22d      	sxthne	r5, r5
 80023fe:	e7ef      	b.n	80023e0 <_printf_i+0xbc>
 8002400:	680b      	ldr	r3, [r1, #0]
 8002402:	6825      	ldr	r5, [r4, #0]
 8002404:	1d18      	adds	r0, r3, #4
 8002406:	6008      	str	r0, [r1, #0]
 8002408:	0628      	lsls	r0, r5, #24
 800240a:	d501      	bpl.n	8002410 <_printf_i+0xec>
 800240c:	681d      	ldr	r5, [r3, #0]
 800240e:	e002      	b.n	8002416 <_printf_i+0xf2>
 8002410:	0669      	lsls	r1, r5, #25
 8002412:	d5fb      	bpl.n	800240c <_printf_i+0xe8>
 8002414:	881d      	ldrh	r5, [r3, #0]
 8002416:	2f6f      	cmp	r7, #111	; 0x6f
 8002418:	bf0c      	ite	eq
 800241a:	2308      	moveq	r3, #8
 800241c:	230a      	movne	r3, #10
 800241e:	4852      	ldr	r0, [pc, #328]	; (8002568 <_printf_i+0x244>)
 8002420:	2100      	movs	r1, #0
 8002422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002426:	6866      	ldr	r6, [r4, #4]
 8002428:	2e00      	cmp	r6, #0
 800242a:	bfa8      	it	ge
 800242c:	6821      	ldrge	r1, [r4, #0]
 800242e:	60a6      	str	r6, [r4, #8]
 8002430:	bfa4      	itt	ge
 8002432:	f021 0104 	bicge.w	r1, r1, #4
 8002436:	6021      	strge	r1, [r4, #0]
 8002438:	b90d      	cbnz	r5, 800243e <_printf_i+0x11a>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d04d      	beq.n	80024da <_printf_i+0x1b6>
 800243e:	4616      	mov	r6, r2
 8002440:	fbb5 f1f3 	udiv	r1, r5, r3
 8002444:	fb03 5711 	mls	r7, r3, r1, r5
 8002448:	5dc7      	ldrb	r7, [r0, r7]
 800244a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800244e:	462f      	mov	r7, r5
 8002450:	42bb      	cmp	r3, r7
 8002452:	460d      	mov	r5, r1
 8002454:	d9f4      	bls.n	8002440 <_printf_i+0x11c>
 8002456:	2b08      	cmp	r3, #8
 8002458:	d10b      	bne.n	8002472 <_printf_i+0x14e>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	07df      	lsls	r7, r3, #31
 800245e:	d508      	bpl.n	8002472 <_printf_i+0x14e>
 8002460:	6923      	ldr	r3, [r4, #16]
 8002462:	6861      	ldr	r1, [r4, #4]
 8002464:	4299      	cmp	r1, r3
 8002466:	bfde      	ittt	le
 8002468:	2330      	movle	r3, #48	; 0x30
 800246a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800246e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002472:	1b92      	subs	r2, r2, r6
 8002474:	6122      	str	r2, [r4, #16]
 8002476:	464b      	mov	r3, r9
 8002478:	4621      	mov	r1, r4
 800247a:	4640      	mov	r0, r8
 800247c:	f8cd a000 	str.w	sl, [sp]
 8002480:	aa03      	add	r2, sp, #12
 8002482:	f7ff fedf 	bl	8002244 <_printf_common>
 8002486:	3001      	adds	r0, #1
 8002488:	d14c      	bne.n	8002524 <_printf_i+0x200>
 800248a:	f04f 30ff 	mov.w	r0, #4294967295
 800248e:	b004      	add	sp, #16
 8002490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002494:	4834      	ldr	r0, [pc, #208]	; (8002568 <_printf_i+0x244>)
 8002496:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800249a:	680e      	ldr	r6, [r1, #0]
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	f856 5b04 	ldr.w	r5, [r6], #4
 80024a2:	061f      	lsls	r7, r3, #24
 80024a4:	600e      	str	r6, [r1, #0]
 80024a6:	d514      	bpl.n	80024d2 <_printf_i+0x1ae>
 80024a8:	07d9      	lsls	r1, r3, #31
 80024aa:	bf44      	itt	mi
 80024ac:	f043 0320 	orrmi.w	r3, r3, #32
 80024b0:	6023      	strmi	r3, [r4, #0]
 80024b2:	b91d      	cbnz	r5, 80024bc <_printf_i+0x198>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	f023 0320 	bic.w	r3, r3, #32
 80024ba:	6023      	str	r3, [r4, #0]
 80024bc:	2310      	movs	r3, #16
 80024be:	e7af      	b.n	8002420 <_printf_i+0xfc>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	6023      	str	r3, [r4, #0]
 80024c8:	2378      	movs	r3, #120	; 0x78
 80024ca:	4828      	ldr	r0, [pc, #160]	; (800256c <_printf_i+0x248>)
 80024cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024d0:	e7e3      	b.n	800249a <_printf_i+0x176>
 80024d2:	065e      	lsls	r6, r3, #25
 80024d4:	bf48      	it	mi
 80024d6:	b2ad      	uxthmi	r5, r5
 80024d8:	e7e6      	b.n	80024a8 <_printf_i+0x184>
 80024da:	4616      	mov	r6, r2
 80024dc:	e7bb      	b.n	8002456 <_printf_i+0x132>
 80024de:	680b      	ldr	r3, [r1, #0]
 80024e0:	6826      	ldr	r6, [r4, #0]
 80024e2:	1d1d      	adds	r5, r3, #4
 80024e4:	6960      	ldr	r0, [r4, #20]
 80024e6:	600d      	str	r5, [r1, #0]
 80024e8:	0635      	lsls	r5, r6, #24
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	d501      	bpl.n	80024f2 <_printf_i+0x1ce>
 80024ee:	6018      	str	r0, [r3, #0]
 80024f0:	e002      	b.n	80024f8 <_printf_i+0x1d4>
 80024f2:	0671      	lsls	r1, r6, #25
 80024f4:	d5fb      	bpl.n	80024ee <_printf_i+0x1ca>
 80024f6:	8018      	strh	r0, [r3, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	4616      	mov	r6, r2
 80024fc:	6123      	str	r3, [r4, #16]
 80024fe:	e7ba      	b.n	8002476 <_printf_i+0x152>
 8002500:	680b      	ldr	r3, [r1, #0]
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	600a      	str	r2, [r1, #0]
 8002506:	681e      	ldr	r6, [r3, #0]
 8002508:	2100      	movs	r1, #0
 800250a:	4630      	mov	r0, r6
 800250c:	6862      	ldr	r2, [r4, #4]
 800250e:	f000 f82f 	bl	8002570 <memchr>
 8002512:	b108      	cbz	r0, 8002518 <_printf_i+0x1f4>
 8002514:	1b80      	subs	r0, r0, r6
 8002516:	6060      	str	r0, [r4, #4]
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	6123      	str	r3, [r4, #16]
 800251c:	2300      	movs	r3, #0
 800251e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002522:	e7a8      	b.n	8002476 <_printf_i+0x152>
 8002524:	4632      	mov	r2, r6
 8002526:	4649      	mov	r1, r9
 8002528:	4640      	mov	r0, r8
 800252a:	6923      	ldr	r3, [r4, #16]
 800252c:	47d0      	blx	sl
 800252e:	3001      	adds	r0, #1
 8002530:	d0ab      	beq.n	800248a <_printf_i+0x166>
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	079b      	lsls	r3, r3, #30
 8002536:	d413      	bmi.n	8002560 <_printf_i+0x23c>
 8002538:	68e0      	ldr	r0, [r4, #12]
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	4298      	cmp	r0, r3
 800253e:	bfb8      	it	lt
 8002540:	4618      	movlt	r0, r3
 8002542:	e7a4      	b.n	800248e <_printf_i+0x16a>
 8002544:	2301      	movs	r3, #1
 8002546:	4632      	mov	r2, r6
 8002548:	4649      	mov	r1, r9
 800254a:	4640      	mov	r0, r8
 800254c:	47d0      	blx	sl
 800254e:	3001      	adds	r0, #1
 8002550:	d09b      	beq.n	800248a <_printf_i+0x166>
 8002552:	3501      	adds	r5, #1
 8002554:	68e3      	ldr	r3, [r4, #12]
 8002556:	9903      	ldr	r1, [sp, #12]
 8002558:	1a5b      	subs	r3, r3, r1
 800255a:	42ab      	cmp	r3, r5
 800255c:	dcf2      	bgt.n	8002544 <_printf_i+0x220>
 800255e:	e7eb      	b.n	8002538 <_printf_i+0x214>
 8002560:	2500      	movs	r5, #0
 8002562:	f104 0619 	add.w	r6, r4, #25
 8002566:	e7f5      	b.n	8002554 <_printf_i+0x230>
 8002568:	08002825 	.word	0x08002825
 800256c:	08002836 	.word	0x08002836

08002570 <memchr>:
 8002570:	4603      	mov	r3, r0
 8002572:	b510      	push	{r4, lr}
 8002574:	b2c9      	uxtb	r1, r1
 8002576:	4402      	add	r2, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	4618      	mov	r0, r3
 800257c:	d101      	bne.n	8002582 <memchr+0x12>
 800257e:	2000      	movs	r0, #0
 8002580:	e003      	b.n	800258a <memchr+0x1a>
 8002582:	7804      	ldrb	r4, [r0, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	428c      	cmp	r4, r1
 8002588:	d1f6      	bne.n	8002578 <memchr+0x8>
 800258a:	bd10      	pop	{r4, pc}

0800258c <memcpy>:
 800258c:	440a      	add	r2, r1
 800258e:	4291      	cmp	r1, r2
 8002590:	f100 33ff 	add.w	r3, r0, #4294967295
 8002594:	d100      	bne.n	8002598 <memcpy+0xc>
 8002596:	4770      	bx	lr
 8002598:	b510      	push	{r4, lr}
 800259a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800259e:	4291      	cmp	r1, r2
 80025a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025a4:	d1f9      	bne.n	800259a <memcpy+0xe>
 80025a6:	bd10      	pop	{r4, pc}

080025a8 <memmove>:
 80025a8:	4288      	cmp	r0, r1
 80025aa:	b510      	push	{r4, lr}
 80025ac:	eb01 0402 	add.w	r4, r1, r2
 80025b0:	d902      	bls.n	80025b8 <memmove+0x10>
 80025b2:	4284      	cmp	r4, r0
 80025b4:	4623      	mov	r3, r4
 80025b6:	d807      	bhi.n	80025c8 <memmove+0x20>
 80025b8:	1e43      	subs	r3, r0, #1
 80025ba:	42a1      	cmp	r1, r4
 80025bc:	d008      	beq.n	80025d0 <memmove+0x28>
 80025be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025c6:	e7f8      	b.n	80025ba <memmove+0x12>
 80025c8:	4601      	mov	r1, r0
 80025ca:	4402      	add	r2, r0
 80025cc:	428a      	cmp	r2, r1
 80025ce:	d100      	bne.n	80025d2 <memmove+0x2a>
 80025d0:	bd10      	pop	{r4, pc}
 80025d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025da:	e7f7      	b.n	80025cc <memmove+0x24>

080025dc <_free_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4605      	mov	r5, r0
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d043      	beq.n	800266c <_free_r+0x90>
 80025e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025e8:	1f0c      	subs	r4, r1, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bfb8      	it	lt
 80025ee:	18e4      	addlt	r4, r4, r3
 80025f0:	f000 f8d0 	bl	8002794 <__malloc_lock>
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <_free_r+0x94>)
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	4610      	mov	r0, r2
 80025fa:	b933      	cbnz	r3, 800260a <_free_r+0x2e>
 80025fc:	6063      	str	r3, [r4, #4]
 80025fe:	6014      	str	r4, [r2, #0]
 8002600:	4628      	mov	r0, r5
 8002602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002606:	f000 b8cb 	b.w	80027a0 <__malloc_unlock>
 800260a:	42a3      	cmp	r3, r4
 800260c:	d90a      	bls.n	8002624 <_free_r+0x48>
 800260e:	6821      	ldr	r1, [r4, #0]
 8002610:	1862      	adds	r2, r4, r1
 8002612:	4293      	cmp	r3, r2
 8002614:	bf01      	itttt	eq
 8002616:	681a      	ldreq	r2, [r3, #0]
 8002618:	685b      	ldreq	r3, [r3, #4]
 800261a:	1852      	addeq	r2, r2, r1
 800261c:	6022      	streq	r2, [r4, #0]
 800261e:	6063      	str	r3, [r4, #4]
 8002620:	6004      	str	r4, [r0, #0]
 8002622:	e7ed      	b.n	8002600 <_free_r+0x24>
 8002624:	461a      	mov	r2, r3
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	b10b      	cbz	r3, 800262e <_free_r+0x52>
 800262a:	42a3      	cmp	r3, r4
 800262c:	d9fa      	bls.n	8002624 <_free_r+0x48>
 800262e:	6811      	ldr	r1, [r2, #0]
 8002630:	1850      	adds	r0, r2, r1
 8002632:	42a0      	cmp	r0, r4
 8002634:	d10b      	bne.n	800264e <_free_r+0x72>
 8002636:	6820      	ldr	r0, [r4, #0]
 8002638:	4401      	add	r1, r0
 800263a:	1850      	adds	r0, r2, r1
 800263c:	4283      	cmp	r3, r0
 800263e:	6011      	str	r1, [r2, #0]
 8002640:	d1de      	bne.n	8002600 <_free_r+0x24>
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4401      	add	r1, r0
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	6053      	str	r3, [r2, #4]
 800264c:	e7d8      	b.n	8002600 <_free_r+0x24>
 800264e:	d902      	bls.n	8002656 <_free_r+0x7a>
 8002650:	230c      	movs	r3, #12
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	e7d4      	b.n	8002600 <_free_r+0x24>
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	1821      	adds	r1, r4, r0
 800265a:	428b      	cmp	r3, r1
 800265c:	bf01      	itttt	eq
 800265e:	6819      	ldreq	r1, [r3, #0]
 8002660:	685b      	ldreq	r3, [r3, #4]
 8002662:	1809      	addeq	r1, r1, r0
 8002664:	6021      	streq	r1, [r4, #0]
 8002666:	6063      	str	r3, [r4, #4]
 8002668:	6054      	str	r4, [r2, #4]
 800266a:	e7c9      	b.n	8002600 <_free_r+0x24>
 800266c:	bd38      	pop	{r3, r4, r5, pc}
 800266e:	bf00      	nop
 8002670:	20000094 	.word	0x20000094

08002674 <_malloc_r>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	1ccd      	adds	r5, r1, #3
 8002678:	f025 0503 	bic.w	r5, r5, #3
 800267c:	3508      	adds	r5, #8
 800267e:	2d0c      	cmp	r5, #12
 8002680:	bf38      	it	cc
 8002682:	250c      	movcc	r5, #12
 8002684:	2d00      	cmp	r5, #0
 8002686:	4606      	mov	r6, r0
 8002688:	db01      	blt.n	800268e <_malloc_r+0x1a>
 800268a:	42a9      	cmp	r1, r5
 800268c:	d903      	bls.n	8002696 <_malloc_r+0x22>
 800268e:	230c      	movs	r3, #12
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	2000      	movs	r0, #0
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002696:	f000 f87d 	bl	8002794 <__malloc_lock>
 800269a:	4921      	ldr	r1, [pc, #132]	; (8002720 <_malloc_r+0xac>)
 800269c:	680a      	ldr	r2, [r1, #0]
 800269e:	4614      	mov	r4, r2
 80026a0:	b99c      	cbnz	r4, 80026ca <_malloc_r+0x56>
 80026a2:	4f20      	ldr	r7, [pc, #128]	; (8002724 <_malloc_r+0xb0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b923      	cbnz	r3, 80026b2 <_malloc_r+0x3e>
 80026a8:	4621      	mov	r1, r4
 80026aa:	4630      	mov	r0, r6
 80026ac:	f000 f862 	bl	8002774 <_sbrk_r>
 80026b0:	6038      	str	r0, [r7, #0]
 80026b2:	4629      	mov	r1, r5
 80026b4:	4630      	mov	r0, r6
 80026b6:	f000 f85d 	bl	8002774 <_sbrk_r>
 80026ba:	1c43      	adds	r3, r0, #1
 80026bc:	d123      	bne.n	8002706 <_malloc_r+0x92>
 80026be:	230c      	movs	r3, #12
 80026c0:	4630      	mov	r0, r6
 80026c2:	6033      	str	r3, [r6, #0]
 80026c4:	f000 f86c 	bl	80027a0 <__malloc_unlock>
 80026c8:	e7e3      	b.n	8002692 <_malloc_r+0x1e>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	1b5b      	subs	r3, r3, r5
 80026ce:	d417      	bmi.n	8002700 <_malloc_r+0x8c>
 80026d0:	2b0b      	cmp	r3, #11
 80026d2:	d903      	bls.n	80026dc <_malloc_r+0x68>
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	441c      	add	r4, r3
 80026d8:	6025      	str	r5, [r4, #0]
 80026da:	e004      	b.n	80026e6 <_malloc_r+0x72>
 80026dc:	6863      	ldr	r3, [r4, #4]
 80026de:	42a2      	cmp	r2, r4
 80026e0:	bf0c      	ite	eq
 80026e2:	600b      	streq	r3, [r1, #0]
 80026e4:	6053      	strne	r3, [r2, #4]
 80026e6:	4630      	mov	r0, r6
 80026e8:	f000 f85a 	bl	80027a0 <__malloc_unlock>
 80026ec:	f104 000b 	add.w	r0, r4, #11
 80026f0:	1d23      	adds	r3, r4, #4
 80026f2:	f020 0007 	bic.w	r0, r0, #7
 80026f6:	1ac2      	subs	r2, r0, r3
 80026f8:	d0cc      	beq.n	8002694 <_malloc_r+0x20>
 80026fa:	1a1b      	subs	r3, r3, r0
 80026fc:	50a3      	str	r3, [r4, r2]
 80026fe:	e7c9      	b.n	8002694 <_malloc_r+0x20>
 8002700:	4622      	mov	r2, r4
 8002702:	6864      	ldr	r4, [r4, #4]
 8002704:	e7cc      	b.n	80026a0 <_malloc_r+0x2c>
 8002706:	1cc4      	adds	r4, r0, #3
 8002708:	f024 0403 	bic.w	r4, r4, #3
 800270c:	42a0      	cmp	r0, r4
 800270e:	d0e3      	beq.n	80026d8 <_malloc_r+0x64>
 8002710:	1a21      	subs	r1, r4, r0
 8002712:	4630      	mov	r0, r6
 8002714:	f000 f82e 	bl	8002774 <_sbrk_r>
 8002718:	3001      	adds	r0, #1
 800271a:	d1dd      	bne.n	80026d8 <_malloc_r+0x64>
 800271c:	e7cf      	b.n	80026be <_malloc_r+0x4a>
 800271e:	bf00      	nop
 8002720:	20000094 	.word	0x20000094
 8002724:	20000098 	.word	0x20000098

08002728 <_realloc_r>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	4607      	mov	r7, r0
 800272c:	4614      	mov	r4, r2
 800272e:	460e      	mov	r6, r1
 8002730:	b921      	cbnz	r1, 800273c <_realloc_r+0x14>
 8002732:	4611      	mov	r1, r2
 8002734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002738:	f7ff bf9c 	b.w	8002674 <_malloc_r>
 800273c:	b922      	cbnz	r2, 8002748 <_realloc_r+0x20>
 800273e:	f7ff ff4d 	bl	80025dc <_free_r>
 8002742:	4625      	mov	r5, r4
 8002744:	4628      	mov	r0, r5
 8002746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002748:	f000 f830 	bl	80027ac <_malloc_usable_size_r>
 800274c:	42a0      	cmp	r0, r4
 800274e:	d20f      	bcs.n	8002770 <_realloc_r+0x48>
 8002750:	4621      	mov	r1, r4
 8002752:	4638      	mov	r0, r7
 8002754:	f7ff ff8e 	bl	8002674 <_malloc_r>
 8002758:	4605      	mov	r5, r0
 800275a:	2800      	cmp	r0, #0
 800275c:	d0f2      	beq.n	8002744 <_realloc_r+0x1c>
 800275e:	4631      	mov	r1, r6
 8002760:	4622      	mov	r2, r4
 8002762:	f7ff ff13 	bl	800258c <memcpy>
 8002766:	4631      	mov	r1, r6
 8002768:	4638      	mov	r0, r7
 800276a:	f7ff ff37 	bl	80025dc <_free_r>
 800276e:	e7e9      	b.n	8002744 <_realloc_r+0x1c>
 8002770:	4635      	mov	r5, r6
 8002772:	e7e7      	b.n	8002744 <_realloc_r+0x1c>

08002774 <_sbrk_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d05      	ldr	r5, [pc, #20]	; (8002790 <_sbrk_r+0x1c>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	f7fd fe88 	bl	8000494 <_sbrk>
 8002784:	1c43      	adds	r3, r0, #1
 8002786:	d102      	bne.n	800278e <_sbrk_r+0x1a>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	b103      	cbz	r3, 800278e <_sbrk_r+0x1a>
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	bd38      	pop	{r3, r4, r5, pc}
 8002790:	200000e4 	.word	0x200000e4

08002794 <__malloc_lock>:
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <__malloc_lock+0x8>)
 8002796:	f000 b811 	b.w	80027bc <__retarget_lock_acquire_recursive>
 800279a:	bf00      	nop
 800279c:	200000ec 	.word	0x200000ec

080027a0 <__malloc_unlock>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__malloc_unlock+0x8>)
 80027a2:	f000 b80c 	b.w	80027be <__retarget_lock_release_recursive>
 80027a6:	bf00      	nop
 80027a8:	200000ec 	.word	0x200000ec

080027ac <_malloc_usable_size_r>:
 80027ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b0:	1f18      	subs	r0, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bfbc      	itt	lt
 80027b6:	580b      	ldrlt	r3, [r1, r0]
 80027b8:	18c0      	addlt	r0, r0, r3
 80027ba:	4770      	bx	lr

080027bc <__retarget_lock_acquire_recursive>:
 80027bc:	4770      	bx	lr

080027be <__retarget_lock_release_recursive>:
 80027be:	4770      	bx	lr

080027c0 <_init>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr

080027cc <_fini>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr
